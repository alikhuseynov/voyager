% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/moran-geary.R
\name{calculateCorrelogram}
\alias{calculateCorrelogram}
\alias{calculateCorrelogram,ANY-method}
\alias{calculateCorrelogram,SpatialFeatureExperiment-method}
\alias{colGeometryCorrelogram}
\alias{colDataCorrelogram}
\alias{annotGeometryCorrelogram}
\alias{runCorrelogram}
\title{Spatial correlogram}
\usage{
\S4method{calculateCorrelogram}{ANY}(
  x,
  listw,
  order = 1,
  method = "I",
  BPPARAM = SerialParam(),
  zero.policy = NULL,
  ...
)

\S4method{calculateCorrelogram}{SpatialFeatureExperiment}(
  x,
  features,
  colGraphName = 1L,
  sample_id = NULL,
  order = 1,
  method = "I",
  exprs_values = "logcounts",
  BPPARAM = SerialParam(),
  zero.policy = NULL,
  ...
)

colGeometryCorrelogram(
  x,
  features,
  colGeometryName = 1L,
  colGraphName = 1L,
  sample_id = NULL,
  order = 1,
  method = "I",
  BPPARAM = SerialParam(),
  zero.policy = NULL,
  ...
)

colDataCorrelogram(
  x,
  features,
  colGraphName = 1L,
  sample_id = NULL,
  order = 1,
  method = "I",
  BPPARAM = SerialParam(),
  zero.policy = NULL,
  ...
)

annotGeometryCorrelogram(
  x,
  features,
  annotGeometryName = 1L,
  annotGraphName = 1L,
  sample_id = NULL,
  order = 1,
  method = "I",
  BPPARAM = SerialParam(),
  zero.policy = NULL,
  ...
)

runCorrelogram(
  sfe,
  features,
  colGraphName = 1L,
  sample_id = NULL,
  order = 1,
  method = "I",
  exprs_values = "logcounts",
  BPPARAM = SerialParam(),
  zero.policy = NULL,
  name = paste("Correlogram", method, sep = "_"),
  ...
)
}
\arguments{
\item{x}{For \code{calculateMoransI} and \code{calculateGearysC}, it can be a
numeric matrix whose rows are features/genes, or a
\code{SpatialFeatureExperiment} (SFE) object with such a matrix in an
assay.}

\item{listw}{Weighted neighborhood graph as a \code{spdep} \code{listw}
object.}

\item{order}{maximum lag order}

\item{method}{"corr" for correlation, "I" for Moran's I, "C" for Geary's C}

\item{BPPARAM}{A \code{\link{BiocParallelParam}} object specifying whether
and how computing the metric for numerous genes shall be parallelized.}

\item{zero.policy}{default NULL, use global option value; if TRUE assign zero to the lagged value of zones without neighbours, if FALSE assign NA}

\item{...}{Other arguments passed to \code{\link{sp.correlogram}}.}

\item{features}{Genes (\code{calculate*} SFE method and \code{run*}) or
numeric columns of \code{colData(x)} (\code{colData*}) or any
\code{\link{colGeometry}} (\code{colGeometryM*}) or
\code{\link{annotGeometry}} (\code{annotGeometry*}) for which the
univariate metric is to be computed. Default to \code{NULL}. When
\code{NULL}, then the metric is computed for all genes with the values in
the assay specified in the argument \code{exprs_values}. This can be
parallelized with the argument \code{BPPARAM}. For genes, if the column
"symbol" is present in \code{rowData} and the row names of the SFE object
are Ensembl IDs, then the gene symbol can be used and converted to IDs
behind the scene. However, if one symbol matches multiple IDs, a warning
will be given and the first match will be used.}

\item{colGraphName}{Name of the listw graph in the SFE object that
corresponds to entities represented by columns of the gene count matrix.
Use \code{\link{colGraphNames}} to look up names of the available graphs
for cells/spots. Note that for multiple \code{sample_id}s, it is assumed
that all of them have a graph of this same name.}

\item{sample_id}{Sample(s) in the SFE object whose cells/spots to use. Can be
"all" to compute metric for all samples; the metric is computed separately
for each sample.}

\item{exprs_values}{Integer scalar or string indicating which assay of x
contains the expression values.}

\item{colGeometryName}{Name of a \code{colGeometry} \code{sf} data frame
whose numeric columns of interest are to be used to compute the metric. Use
\code{\link{colGeometryNames}} to look up names of the \code{sf} data
frames associated with cells/spots.}

\item{annotGeometryName}{Name of a \code{annotGeometry} \code{sf} data frame
whose numeric columns of interest are to be used to compute the metric. Use
\code{\link{annotGeometryNames}} to look up names of the \code{sf} data
frames associated with annotations.}

\item{annotGraphName}{Name of the listw graph in the SFE object that
corresponds to the \code{annotGeometry} of interest. Use
\code{\link{annotGraphNames}} to look up names of available annotation
graphs.}

\item{sfe}{A \code{SpatialFeatureExperiment} object.}

\item{name}{String specifying the name to be used to store the results in
\code{rowData(x)}. If not already present in the name, then the
\code{sample_id} will be appended to the name specified here separated by
an underscore.}
}
\value{
For \code{calculateCorrelogram}, a list of \code{spcor} objects, each
  element of which correslonds to a feature. or if multiple \code{sample_id}s
  are specified in the SFE method, a list of such lists whose names are the
  \code{sample_id}s. For \code{runCorrelogram}, the \code{res} field of the
  \code{spcor} is taken and put in a list column in \code{rowData(x)}, and
  the SFE object with the new \code{rowData} is returned. For the colData,
  colGeometry, and annotGeometry versions, the results are added to an
  attribute of the data frame of interest called \code{featureData}, in a
  manner analogous to \code{rowData}.
}
\description{
Still debating whether I should write the wrapper. It should be
straightforward to call sp.correlogram directly on single colData columns.
But for genes, there's more boilerplate. I suppose, for genes, it might be
cool to compute the correlogram for a bunch of genes and plot them in the
same plot, with the error bars, or cluster them. So I'll write the wrapper.
}
\examples{
library(SpatialFeatureExperiment)
library(SingleCellExperiment)
library(SFEData)
sfe <- McKellarMuscleData("small")
colGraph(sfe, "visium") <- findVisiumGraph(sfe)
# Compute correlogram for vector or matrix
calculateCorrelogram(colData(sfe)$nCounts, listw = colGraph(sfe, "visium"),
                     order = 5)
# Add results to rowData, features are genes
sfe <- runCorrelogram(sfe, features = rownames(sfe)[1], exprs_values = "counts",
                      order = 5)
rowData(sfe)
# Specifically for colData
sfe <- colDataCorrelogram(sfe, "nCounts", order = 5)
attr(colData(sfe), "featureData")
}
