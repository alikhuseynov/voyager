[{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pachterlab.github.io/Voyager/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Basic Visium exploratory data analysis","text":"working definition “spatial transcriptomics” attempt quantify transcripts genes can done one round fluorescent situ hybridization (FISH) preserving spatial context gene expression tissue. Since 2018, interest spatial transcriptomics – data collection data analysis – grown drastically. Number publication time current era data collection data analysis. Bin width 120 days. x-shaped points show number publications last bin, yet full. Techniques used least 3 institutions number institutions used . data represented SpatialFeatureExperiment (SFE) format, Voyager used perform spatial analysis methods borrowed geospatial field. SingleCellExperiment (SCE) data structure scRNA-seq, alternative popular Seurat package. SpatialExperiment (SPE) existing class inheriting SCE, spatial -omics data, SFE inherits SPE hence also SCE. SFE inherits SCE, non-spatial scRNA-seq EDA methods dimension reduction, clustering, many plotting functions can applied SFE. vignette, perform non-spatial scRNA-seq EDA Visium data, primer spatial analysis. See ESDA Visium vignette depth introduction univariate spatial analyses dataset.","code":"library(Voyager) library(SpatialFeatureExperiment) library(SingleCellExperiment) #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians library(SpatialExperiment) library(scater) #> Loading required package: scuttle #> Loading required package: ggplot2 library(scran) library(patchwork) library(bluster) library(SFEData) library(BiocParallel) library(rjson) library(stringr) library(ggplot2) library(sparseMatrixStats) theme_set(theme_bw(10))"},{"path":[]},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"space-ranger-output","dir":"Articles","previous_headings":"Dataset","what":"Space Ranger output","title":"Basic Visium exploratory data analysis","text":"gene count matrix spot metadata provided authors dataset actually come standard Space Ranger output format. However, given popularity Visium Space Ranger, helpful introduce Space Ranger output read R SFE object. Space Ranger output can read similar manner SpatialExperiment; returned SFE object spotPoly column geometry spot polygons. filtered matrix (.e. spots tissue) read , column graph called visium also present, spatial neighborhood graph Visium spots tissue. graph computed spots read regardless whether tissue. results tissue capture outs directory. Inside outs directory two directories: raw_reature_bc_matrix unfiltered gene count matrix, spatial spatial information. DropletUtils package function read10xCounts() reads gene count matrix. SPE reads spatial information, SFE uses spatial information construct Visium spot polygons spatial neighborhood graphs. Inside spatial directory: tissue_lowres_image.png low re Inside scalefactors_json.json file: spot_diameter_fullres diameter Visium spot full resolution H&E image pixels. tissue_hires_scalef tissue_lowres_scalef ratio size high resolution (full resolution) low resolution H&E image full resolution image. fiducial_diameter_fullres diameter fiducial spot used align spots H&E image pixels full resolution image. tissue_positions_list.csv file contains information spatial coordinates spots whether spot tissue automatically detected Space Ranger manually annotated Loupe browser. polygon tissue boundary available, whether image processing manual annotation, geometric operations supported SFE package, based sf package, can used find spots intersect tissue spots contained tissue. Geometric operations can also find polygons intersections spots tissue, results can get messy since intersections can polygons also points lines. Now read toy data Space Ranger output format. load argument indicates whether images loaded memory. SFE package work image present, load = FALSE. Space Ranger output includes gene count matrix, spot coordinates, spot diameter. Space Ranger output include nuclei segmentation pathologist annotation histological regions. Extra image processing, ImageJ QuPath, required geometries.","code":"# Example from SpatialExperiment dir <- system.file(   file.path(\"extdata\", \"10xVisium\"),    package = \"SpatialExperiment\")    sample_ids <- c(\"section1\", \"section2\") (samples <- file.path(dir, sample_ids, \"outs\")) #> [1] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section1/outs\" #> [2] \"/home/runner/work/_temp/Library/SpatialExperiment/extdata/10xVisium/section2/outs\" list.files(samples[1]) #> [1] \"raw_feature_bc_matrix\" \"spatial\" list.files(file.path(samples[1], \"spatial\")) #> [1] \"scalefactors_json.json\"    \"tissue_lowres_image.png\"   #> [3] \"tissue_positions_list.csv\" fromJSON(file = file.path(samples[1], \"spatial\", \"scalefactors_json.json\")) #> $spot_diameter_fullres #> [1] 89.44476 #>  #> $tissue_hires_scalef #> [1] 0.1701114 #>  #> $fiducial_diameter_fullres #> [1] 144.4877 #>  #> $tissue_lowres_scalef #> [1] 0.05103343 (sfe3 <- read10xVisiumSFE(samples, sample_ids, type = \"sparse\", data = \"raw\",                          load = FALSE)) #> Warning: as(<dgTMatrix>, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., #> \"CsparseMatrix\") instead  #> Warning: as(<dgTMatrix>, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., #> \"CsparseMatrix\") instead #> class: SpatialFeatureExperiment  #> dim: 50 99  #> metadata(0): #> assays(1): counts #> rownames(50): ENSMUSG00000051951 ENSMUSG00000089699 ... #>   ENSMUSG00000005886 ENSMUSG00000101476 #> rowData names(1): symbol #> colnames(99): AAACAACGAATAGTTC-1 AAACAAGTATCTCCCA-1 ... #>   AAAGTCGACCCTCAGT-1-1 AAAGTGCCATCAATTA-1-1 #> colData names(4): in_tissue array_row array_col sample_id #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : pxl_row_in_fullres pxl_col_in_fullres #> imgData names(4): sample_id image_id data scaleFactor #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #>  #> Graphs: #> section1:  #> section2:"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"mouse-skeletal-muscle-dataset","dir":"Articles","previous_headings":"Dataset","what":"Mouse skeletal muscle dataset","title":"Basic Visium exploratory data analysis","text":"dataset used vignette comes Large-scale integration single-cell transcriptomic data captures transitional progenitor states mouse skeletal muscle regeneration (McKellar et al. 2021). Notexin injected tibialis anterior muscle induce injury, healing muscle collected 2, 5, 7 days post injury Visium. dataset 2 day timepoint. dataset originally Space Ranger output format, already SpatialFeatureExperiment (SFE) object. gene count matrix directly downloaded GEO. 4992 spots, whether tissue , included. H&E image used nuclei myofiber segmentation. subset nuclei randomly selected regions 3 timepoints manually annotated train StarDist model segment rest nuclei, myofibers manually segmented. tissue boundary found thresholding OpenCV, small polygons removed likely debris. Spot polygons constructed spot centroid coordinates diameter Space Ranger output. in_tissue column colData indicates spot polygons intersect tissue polygons, based st_intersects(). Tissue boundary, nuclei, myofiber, Visium spot polygons stored sf data frames SFE object. See vignette SpatialFeatureExperiment details structure SFE object. SFE object dataset provided SFEData package. Low resolution H&E image tissue section","code":"(sfe <- McKellarMuscleData(\"full\")) #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> class: SpatialFeatureExperiment  #> dim: 15123 4992  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(4992): AAACAACGAATAGTTC AAACAAGTATCTCCCA ... TTGTTTGTATTACACG #>   TTGTTTGTGTAAATTC #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (POLYGON), myofiber_simplified (POLYGON), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:"},{"path":[]},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"spots","dir":"Articles","previous_headings":"Quality control","what":"Spots","title":"Basic Visium exploratory data analysis","text":"plot quality control (QC) metrics violin plots space. QC metrics pre-computed stored colData (spots) rowData SFE object. Total number UMI detected per spot  spots injury site leukocyte infiltration high total counts. Spatial autocorrelation total counts apparent, discussed later section vignette. Number genes detected per spot  nCounts vs. nGenes, commonly plotted scRNA-seq  plot two branches spots tissue, turn related myofiber size. See ESDA Visium vignette. Proportion mitochondrially encoded UMI counts  expected, spots outside tissue higher proportion mitochondrial counts, tissue lysed, mitochondrial transcripts protected double membrane less likely degrade cytosolic transcripts. However, spots myofibers also high proportion mitochondrial counts, function myofibers. injury site leukocyte infiltration lower proportion mitochondrial counts. proportion mitochondrial counts relate total UMI counts?  two clusters spots tissue, also turn related myofiber size. See ESDA Visium vignette. far haven’t seen spots obvious outliers QC metrics following analyses use spots tissue.","code":"names(colData(sfe)) #>  [1] \"barcode\"   \"col\"       \"row\"       \"x\"         \"y\"         \"dia\"       #>  [7] \"tissue\"    \"sample_id\" \"nCounts\"   \"nGenes\"    \"prop_mito\" \"in_tissue\" # colData(sfe)$nCounts <- colSums(counts(sfe)) violin <- plotColData(sfe, \"nCounts\", x = \"in_tissue\", colour_by = \"in_tissue\") +     theme(legend.position = \"top\") spatial <- plotSpatialFeature(sfe, \"nCounts\", colGeometryName = \"spotPoly\",                               annotGeometryName = \"tissueBoundary\") +     theme_void() violin + spatial # colData(sfe)$nGenes <- colSums(counts(sfe) > 0) violin <- plotColData(sfe, \"nGenes\", x = \"in_tissue\", colour_by = \"in_tissue\") +     theme(legend.position = \"top\") spatial <- plotSpatialFeature(sfe, \"nGenes\", colGeometryName = \"spotPoly\",                               annotGeometryName = \"tissueBoundary\") +     theme_void() violin + spatial plotColData(sfe, x = \"nCounts\", y = \"nGenes\", colour_by = \"in_tissue\") # mito_ind <- str_detect(rowData(sfe)$symbol, \"^Mt-\") # colData(sfe)$prop_mito <- colSums(counts(sfe)[mito_ind,]) / colData(sfe)$nCounts violin <- plotColData(sfe, \"prop_mito\", x = \"in_tissue\", colour_by = \"in_tissue\") +     theme(legend.position = \"top\") spatial <- plotSpatialFeature(sfe, \"prop_mito\", colGeometryName = \"spotPoly\",                               annotGeometryName = \"tissueBoundary\") +     theme_void() violin + spatial plotColData(sfe, x = \"nCounts\", y = \"prop_mito\", colour_by = \"in_tissue\") sfe_tissue <- sfe[, colData(sfe)$in_tissue] sfe_tissue <- sfe_tissue[rowSums(counts(sfe_tissue)) > 0,]"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"genes","dir":"Articles","previous_headings":"Quality control","what":"Genes","title":"Basic Visium exploratory data analysis","text":"Like scRNA-seq, gene expression Visium overdispersed compared Poisson. Mean variance gene  red line, \\(y = x\\), expected Poisson distributed data, variance higher highly expressed genes expected Poisson. CV2 gives picture.","code":"rowData(sfe_tissue)$means <- rowMeans(counts(sfe_tissue)) rowData(sfe_tissue)$vars <- rowVars(counts(sfe_tissue)) # Coefficient of variance rowData(sfe_tissue)$cv2 <- rowData(sfe_tissue)$vars/rowData(sfe_tissue)$means^2 as.data.frame(rowData(sfe_tissue)) |>      ggplot(aes(means, vars)) +     geom_bin2d(bins = 50) +     geom_abline(slope = 1, intercept = 0, color = \"red\") +     scale_x_log10() + scale_y_log10() +     scale_fill_distiller(palette = \"Blues\", direction = 1) +     annotation_logticks() +     coord_equal() as.data.frame(rowData(sfe_tissue)) |>      ggplot(aes(means, cv2)) +     geom_bin2d(bins = 50) +     geom_abline(slope = -1, intercept = 0, color = \"red\") +     scale_x_log10() + scale_y_log10() +     scale_fill_distiller(palette = \"Blues\", direction = 1) +     annotation_logticks() +     coord_equal()"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"normalize-data","dir":"Articles","previous_headings":"","what":"Normalize data","title":"Basic Visium exploratory data analysis","text":"scran (Lun, Bach, Marioni 2016) used data normalization demonstration purposes make data normally distributed, mean best practice normalizing spatial transcriptomics data, don’t know best practice really . seen nCounts plot space , spatial autocorrelation evident. Visium, reverse transcription occurs situ spots, PCR amplification occurs cDNA dissociated spots. artifacts introduced amplification step spatial. Spatial artifacts may arise diffusion transcripts adjacent spots tissue permeablization. However, given total counts seem correspond histological regions, total counts may biological component hence treated technical artifact normalized away scRNA-seq data normalization methods. Find highly variable genes, use highly variable genes PCA","code":"clusters <- quickCluster(sfe_tissue) sfe_tissue <- computeSumFactors(sfe_tissue, clusters=clusters) #> Warning in (function (x, sizes, min.mean = NULL, positive = FALSE, scaling = #> NULL) : encountered non-positive size factor estimates sfe_tissue <- sfe_tissue[, sizeFactors(sfe_tissue) > 0] sfe_tissue <- logNormCounts(sfe_tissue) dec <- modelGeneVar(sfe_tissue) hvgs <- getTopHVGs(dec, n = 2000)"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"dimension-reduction-and-clustering","dir":"Articles","previous_headings":"","what":"Dimension reduction and clustering","title":"Basic Visium exploratory data analysis","text":"principal components (PCs) can plotted space. Due spatial autocorrelation many genes spatial regions different histological characters, even though spatial information used PCA, PCs may show spatial structure.  PC1, explains far variance PC2, separates injury site myofibers close site visium myofibers. PC2 highlight myofibers near edge. PC3 highlights muscle tendon junctions. PC4 seem informative; might picked outlier. Also run UMAP based PCA clustering show dimension reduction plots   clusters space?  spatial information explicitly used, due spatial autocorrelation gene expression histological regions, clusters somewhat spatially contiguous. many methods find spatially informed clusters, BayesSpace (Zhao et al. 2021), Bioconductor.","code":"sfe_tissue <- runPCA(sfe_tissue, ncomponents = 30, subset_row = hvgs,                      scale = TRUE) # scale as in Seurat ElbowPlot(sfe_tissue, ndims = 30) plotDimLoadings(sfe_tissue, dims = 1:4) spatialReducedDim(sfe_tissue, \"PCA\", ncomponents = 4,                    colGeometryName = \"spotPoly\", divergent = TRUE,                    diverge_center = 0) &     theme_void() set.seed(29) sfe_tissue <- runUMAP(sfe_tissue, dimred = \"PCA\", n_dimred = 3) colData(sfe_tissue)$cluster <- clusterRows(reducedDim(sfe_tissue, \"PCA\")[,1:3],                                            BLUSPARAM = SNNGraphParam(                                                cluster.fun = \"leiden\",                                                cluster.args = list(                                                    resolution_parameter = 0.5,                                                    objective_function = \"modularity\"))) plotPCA(sfe_tissue, ncomponents = 3, colour_by = \"cluster\") plotUMAP(sfe_tissue, colour_by = \"cluster\") plotSpatialFeature(sfe_tissue, \"cluster\", colGeometryName = \"spotPoly\")"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"non-spatial-differential-expression","dir":"Articles","previous_headings":"","what":"Non-spatial differential expression","title":"Basic Visium exploratory data analysis","text":"Cluster marker genes found Wilcoxon rank sum test commonly done scRNA-seq. ’s already sorted p-values Get significant marker cluster plot  Plot genes space","code":"markers <- findMarkers(sfe_tissue, groups = colData(sfe_tissue)$cluster,                        test.type = \"wilcox\", pval.type = \"all\", direction = \"up\") markers[[6]] #> DataFrame with 15043 rows and 8 columns #>                        p.value         FDR summary.AUC     AUC.1     AUC.2 #>                      <numeric>   <numeric>   <numeric> <numeric> <numeric> #> ENSMUSG00000098178 5.05056e-11 7.59756e-07    0.734338  0.734338  0.875668 #> ENSMUSG00000028031 5.91274e-02 1.00000e+00    0.523428  0.539526  0.545455 #> ENSMUSG00000044349 1.43199e-01 1.00000e+00    0.505682  0.505682  0.505682 #> ENSMUSG00000095676 1.43199e-01 1.00000e+00    0.505682  0.505682  0.505682 #> ENSMUSG00000050640 1.43199e-01 1.00000e+00    0.505682  0.505682  0.505682 #> ...                        ...         ...         ...       ...       ... #> ENSMUSG00000087095           1           1         0.5       0.5  0.495098 #> ENSMUSG00000043969           1           1         0.5       0.5  0.500000 #> ENSMUSG00000091378           1           1         0.5       0.5  0.500000 #> ENSMUSG00000072437           1           1         0.5       0.5  0.500000 #> ENSMUSG00000094649           1           1         0.5       0.5  0.495098 #>                        AUC.3     AUC.4     AUC.5 #>                    <numeric> <numeric> <numeric> #> ENSMUSG00000098178  0.910395  0.789497  0.875780 #> ENSMUSG00000028031  0.538003  0.523428  0.540998 #> ENSMUSG00000044349  0.505682  0.505682  0.505682 #> ENSMUSG00000095676  0.505682  0.505682  0.505682 #> ENSMUSG00000050640  0.505682  0.505682  0.505682 #> ...                      ...       ...       ... #> ENSMUSG00000087095  0.497268       0.5  0.495098 #> ENSMUSG00000043969  0.497268       0.5  0.500000 #> ENSMUSG00000091378  0.497268       0.5  0.500000 #> ENSMUSG00000072437  0.494536       0.5  0.500000 #> ENSMUSG00000094649  0.500000       0.5  0.500000 genes_use <- vapply(markers, function(x) rownames(x)[1], FUN.VALUE = character(1)) plotExpression(sfe_tissue, rowData(sfe_tissue)[genes_use, \"symbol\"], x = \"cluster\",                colour_by = \"cluster\", swap_rownames = \"symbol\") plotSpatialFeature(sfe_tissue, genes_use, colGeometryName = \"spotPoly\") &     theme_void()"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"morans-i","dir":"Articles","previous_headings":"","what":"Moran’s I","title":"Basic Visium exploratory data analysis","text":"Tobler’s first law geography: Everything related everything else. near things related distant things. spatial autocorrelation basically . positive spatial autocorrelation, nearby things tend similar, weather Pasadena downtoan Los Angeles tend similar weather Pasadena San Francisco. can also negative spatial autocorrelation, nearby things tend dissimilar, like checkerboard. Spatial autocorrelation can caused intrinsic process diffusion communication physical contact, another covariate intrinsic process. commonly used metric spatial autocorrelation Moran’s , defined \\[ = \\frac{n}{\\sum_{=1}^n \\sum_{j=1}^n w_{ij}} \\frac{\\sum_{=1}^n \\sum_{j=1}^n w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{=1}^n (x_i - \\bar{x})^2}, \\] \\(n\\) number spots locations, \\(\\) \\(j\\) different locations, spots Visium context, \\(x\\) variable values location, \\(w_{ij}\\) spatial weight, can inversely proportional distance spots indicator whether two spots neighbors, subject various definitions neighborhood whether normalize number neighbors. spdep package uses neighborhood. Moran’s looks kind like Pearson correlation value location average value neighbors. Just like Pearson correlation, Moran’s generally bound -1 1, positive value indicates positive spatial autocorrelation negative value indicates negative spatial autocorrelation. Spatial dependence analysis spdep requires spatial neighborhood graph. graph adjacent Visium spot can found mentioned spatial autocorrelation apparent total UMI counts. ’s Moran’s say: K means kurtosis. positive values Moran’s indicate positive spatial autocorrelation.","code":"colGraph(sfe_tissue, \"visium\") <- findVisiumGraph(sfe_tissue) calculateMoransI(t(colData(sfe_tissue)[,c(\"nCounts\", \"nGenes\")]),                   listw = colGraph(sfe_tissue, \"visium\")) #> DataFrame with 2 rows and 2 columns #>             moran         K #>         <numeric> <numeric> #> nCounts  0.528705   3.00082 #> nGenes   0.384028   3.88036"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"spatially-variable-genes","dir":"Articles","previous_headings":"Moran’s I","what":"Spatially variable genes","title":"Basic Visium exploratory data analysis","text":"spatially variable gene gene whose expression depends spatial locations, rather scatter around like salt pepper. spatial variable genes spatial autocorrelation, sometimes Moran’s used compare validate spatially variable genes identified different methods. Seurat ranks Moran’s identify spatially variable genes. can also done Voyager. BPPARAM used parallelize computation Moran’s 2000 highly variable genes, 2 cores used SNOW backend. results stored rowData NA’s genes highly variable Moran’s computed genes. Now rank genes Moran’s plot space. see genes strong positive spatial autocorrelation, don’t observe strong negative spatial autocorrelation. Plot genes strongest positive spatial autocorrelation space  genes indeed look like spatially variable. However, spatial variability can simply due histological regions space, words, spatial distribution different cell types. many methods identify spatially variable genes, often involving Gaussian process modeling, far complex Moran’s , SpatialDE (Svensson, Teichmann, Stegle 2018). However, methods usually don’t account histological regions, except C-SIDE (Cable et al. 2022), identifies spatially variable genes within cell types. really mean “cell type”? remains see whether spatial methods made specifically identifying spatially variable genes compare methods don’t explicitly use spatial information simply performs DE cell types often spatially defined histological regions. ways see whether Moran’s statistically significant, many methods explore spatial autocorrelation. discussed ESDA Visium vignette.","code":"sfe_tissue <- runMoransI(sfe_tissue, features = hvgs, colGraphName = \"visium\",                          BPPARAM = SnowParam(2)) #> Warning: <anonymous>: ... may be used in an incorrect context: 'fun(x[i, ], listw, ...)' rowData(sfe_tissue) #> DataFrame with 15043 rows and 8 columns #>                               Ensembl      symbol            type      means #>                           <character> <character>     <character>  <numeric> #> ENSMUSG00000025902 ENSMUSG00000025902       Sox17 Gene Expression 0.03969957 #> ENSMUSG00000096126 ENSMUSG00000096126     Gm22307 Gene Expression 0.00107296 #> ENSMUSG00000033845 ENSMUSG00000033845      Mrpl15 Gene Expression 0.38197425 #> ENSMUSG00000025903 ENSMUSG00000025903      Lypla1 Gene Expression 0.28755365 #> ENSMUSG00000033813 ENSMUSG00000033813       Tcea1 Gene Expression 0.26502146 #> ...                               ...         ...             ...        ... #> ENSMUSG00000064360 ENSMUSG00000064360      mt-Nd3 Gene Expression  56.445279 #> ENSMUSG00000064363 ENSMUSG00000064363      mt-Nd4 Gene Expression 123.991416 #> ENSMUSG00000064367 ENSMUSG00000064367      mt-Nd5 Gene Expression  14.645923 #> ENSMUSG00000064368 ENSMUSG00000064368      mt-Nd6 Gene Expression   0.109442 #> ENSMUSG00000064370 ENSMUSG00000064370     mt-Cytb Gene Expression 121.273605 #>                           vars       cv2 moran_Vis5A   K_Vis5A #>                      <numeric> <numeric>   <numeric> <numeric> #> ENSMUSG00000025902  0.04460915  28.30429          NA        NA #> ENSMUSG00000096126  0.00107296 932.00000          NA        NA #> ENSMUSG00000033845  0.47048031   3.22458          NA        NA #> ENSMUSG00000025903  0.34686963   4.19497          NA        NA #> ENSMUSG00000033813  0.32388797   4.61140   0.0197543   29.6881 #> ...                        ...       ...         ...       ... #> ENSMUSG00000064360 2.47976e+03  0.778314    0.605694   4.70819 #> ENSMUSG00000064363 1.45282e+04  0.944991    0.680026   4.79491 #> ENSMUSG00000064367 2.34858e+02  1.094895    0.635612   2.74170 #> ENSMUSG00000064368 1.31941e-01 11.015664          NA        NA #> ENSMUSG00000064370 1.48225e+04  1.007833    0.722350   3.95620 df <- rowData(sfe_tissue)[hvgs,] ord <- order(df$moran_Vis5A, decreasing = TRUE) df[ord, c(\"symbol\", \"moran_Vis5A\")] #> DataFrame with 2000 rows and 2 columns #>                         symbol moran_Vis5A #>                    <character>   <numeric> #> ENSMUSG00000064351      mt-Co1    0.814980 #> ENSMUSG00000064345      mt-Nd2    0.784339 #> ENSMUSG00000018893          Mb    0.761522 #> ENSMUSG00000056328        Myh1    0.727282 #> ENSMUSG00000064370     mt-Cytb    0.722350 #> ...                        ...         ... #> ENSMUSG00000055436      Srsf11  -0.0397929 #> ENSMUSG00000067713      Prkag1  -0.0404949 #> ENSMUSG00000090262       Mpv17  -0.0423579 #> ENSMUSG00000030061        Uba3  -0.0424449 #> ENSMUSG00000020964       Sel1l  -0.0507095 plotSpatialFeature(sfe_tissue, rownames(df)[1:6], colGeometryName = \"spotPoly\") &     theme_void()"},{"path":"https://pachterlab.github.io/Voyager/articles/vig1_visium_basic.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Basic Visium exploratory data analysis","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] sparseMatrixStats_1.8.0         stringr_1.4.1                   #>  [3] rjson_0.2.21                    BiocParallel_1.30.4             #>  [5] SFEData_0.99.5                  bluster_1.7.0                   #>  [7] patchwork_1.1.2                 scran_1.24.1                    #>  [9] scater_1.24.0                   ggplot2_3.3.6                   #> [11] scuttle_1.7.4                   SpatialExperiment_1.6.1         #> [13] SingleCellExperiment_1.18.1     SummarizedExperiment_1.26.1     #> [15] Biobase_2.57.1                  GenomicRanges_1.48.0            #> [17] GenomeInfoDb_1.33.13            IRanges_2.31.2                  #> [19] S4Vectors_0.35.4                BiocGenerics_0.43.4             #> [21] MatrixGenerics_1.9.1            matrixStats_0.62.0              #> [23] SpatialFeatureExperiment_0.99.8 Voyager_0.99.5                  #>  #> loaded via a namespace (and not attached): #>   [1] snow_0.4-4                    AnnotationHub_3.5.2           #>   [3] BiocFileCache_2.4.0           systemfonts_1.0.4             #>   [5] igraph_1.3.5                  sp_1.5-0                      #>   [7] digest_0.6.30                 htmltools_0.5.3               #>   [9] viridis_0.6.2                 magick_2.7.3                  #>  [11] fansi_1.0.3                   magrittr_2.0.3                #>  [13] memoise_2.0.1                 ScaledMatrix_1.5.1            #>  [15] cluster_2.1.3                 limma_3.53.10                 #>  [17] Biostrings_2.65.6             R.utils_2.12.0                #>  [19] pkgdown_2.0.6                 colorspace_2.0-3              #>  [21] rappdirs_0.3.3                blob_1.2.3                    #>  [23] ggrepel_0.9.1                 textshaping_0.3.6             #>  [25] xfun_0.34                     dplyr_1.0.10                  #>  [27] crayon_1.5.2                  RCurl_1.98-1.9                #>  [29] jsonlite_1.8.2                glue_1.6.2                    #>  [31] gtable_0.3.1                  zlibbioc_1.43.0               #>  [33] XVector_0.37.1                DelayedArray_0.23.2           #>  [35] scico_1.3.1                   BiocSingular_1.13.1           #>  [37] DropletUtils_1.17.3           Rhdf5lib_1.19.2               #>  [39] HDF5Array_1.25.2              scales_1.2.1                  #>  [41] DBI_1.1.3                     edgeR_3.39.6                  #>  [43] Rcpp_1.0.9                    xtable_1.8-4                  #>  [45] viridisLite_0.4.1             spData_2.2.0                  #>  [47] units_0.8-0                   dqrng_0.3.0                   #>  [49] bit_4.0.4                     spdep_1.2-7                   #>  [51] rsvd_1.0.5                    proxy_0.4-27                  #>  [53] httr_1.4.4                    metapod_1.5.0                 #>  [55] FNN_1.1.3.1                   RColorBrewer_1.1-3            #>  [57] ellipsis_0.3.2                wk_0.7.0                      #>  [59] farver_2.1.1                  pkgconfig_2.0.3               #>  [61] R.methodsS3_1.8.2             uwot_0.1.14                   #>  [63] dbplyr_2.2.1                  sass_0.4.2                    #>  [65] deldir_1.0-6                  locfit_1.5-9.6                #>  [67] utf8_1.2.2                    labeling_0.4.2                #>  [69] AnnotationDbi_1.59.1          later_1.3.0                   #>  [71] tidyselect_1.2.0              rlang_1.0.6                   #>  [73] BiocVersion_3.16.0            munsell_0.5.0                 #>  [75] tools_4.2.1                   cachem_1.0.6                  #>  [77] cli_3.4.1                     ExperimentHub_2.5.0           #>  [79] generics_0.1.3                RSQLite_2.2.18                #>  [81] evaluate_0.17                 fastmap_1.1.0                 #>  [83] yaml_2.3.6                    ragg_1.2.3                    #>  [85] knitr_1.40                    bit64_4.0.5                   #>  [87] fs_1.5.2                      purrr_0.3.5                   #>  [89] s2_1.1.0                      KEGGREST_1.36.3               #>  [91] mime_0.12                     R.oo_1.25.0                   #>  [93] compiler_4.2.1                png_0.1-7                     #>  [95] interactiveDisplayBase_1.34.0 filelock_1.0.2                #>  [97] curl_4.3.3                    beeswarm_0.4.0                #>  [99] e1071_1.7-11                  tibble_3.1.8                  #> [101] statmod_1.4.37                bslib_0.4.0                   #> [103] stringi_1.7.8                 highr_0.9                     #> [105] desc_1.4.2                    lattice_0.20-45               #> [107] Matrix_1.5-1                  classInt_0.4-8                #> [109] vctrs_0.4.2                   pillar_1.8.1                  #> [111] lifecycle_1.0.3               rhdf5filters_1.9.0            #> [113] BiocManager_1.30.18           jquerylib_0.1.4               #> [115] BiocNeighbors_1.14.0          cowplot_1.1.1                 #> [117] bitops_1.0-7                  irlba_2.3.5.1                 #> [119] httpuv_1.6.6                  R6_2.5.1                      #> [121] promises_1.2.0.1              KernSmooth_2.23-20            #> [123] gridExtra_2.3                 vipor_0.4.5                   #> [125] codetools_0.2-18              boot_1.3-28                   #> [127] assertthat_0.2.1              rhdf5_2.40.0                  #> [129] rprojroot_2.0.3               withr_2.5.0                   #> [131] GenomeInfoDbData_1.2.8        parallel_4.2.1                #> [133] grid_4.2.1                    beachmat_2.13.4               #> [135] class_7.3-20                  rmarkdown_2.17                #> [137] DelayedMatrixStats_1.18.2     ggnewscale_0.4.8              #> [139] sf_1.0-8                      shiny_1.7.2                   #> [141] ggbeeswarm_0.6.0"},{"path":[]},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ESDA with Visium mouse skeletal muscle dataset","text":"single cell RNA-seq (scRNA-seq), data metadata can represented SingleCellExperiment Seurat objects, basic exploratory data analyses visualization performed scater, scran, scuttle, Seurat. SpatialFeatureExperiment package S4 class extending SpatialExperiment SingleCellExperiment brings EDA methods vector spatial data spatial transcriptomics. Voyager SpatialFeatureExperiment just like scater, scran, scuttle SingleCellExperiment, implementing basic exploratory spatial data analysis (ESDA) visualization methods. Tobler’s first law geography: Everything related everything else. near things related distant things. Non-spatial statistical methods often assume samples (cells, spots) independent, case spatial data, nearby samples tend similar (.e. positive spatial autocorrelation; negative spatial autocorrelation nearby samples tend dissimilar, like checkered pattern). Much ESDA dedicated spatial autocorrelation, finding whether present, ’s length scale. vignette gives overview ESDA methods, functionalities Voyager package, applications SpatialFeatureExperiment class published Visium dataset.","code":"library(Voyager) library(SpatialFeatureExperiment) library(scater) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: 'MatrixGenerics' #> The following objects are masked from 'package:matrixStats': #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, aperm, append, as.data.frame, basename, cbind, #>     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, #>     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, #>     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, #>     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, #>     table, tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: 'Biobase' #> The following object is masked from 'package:MatrixGenerics': #>  #>     rowMedians #> The following objects are masked from 'package:matrixStats': #>  #>     anyMissing, rowMedians #> Loading required package: scuttle #> Loading required package: ggplot2 library(scran) library(SFEData) library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE library(ggplot2) library(scales) library(patchwork) library(BiocParallel) library(bluster) theme_set(theme_bw(10))"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"dataset","dir":"Articles","previous_headings":"","what":"Dataset","title":"ESDA with Visium mouse skeletal muscle dataset","text":"dataset used vignette comes Large-scale integration single-cell transcriptomic data captures transitional progenitor states mouse skeletal muscle regeneration (McKellar et al. 2021). Notexin injected tibialis anterior muscle induce injury, healing muscle collected 2, 5, 7 days post injury Visium. dataset 2 day timepoint. dataset SpatialFeatureExperiment (SFE) object. gene count matrix directly downloaded GEO. 4992 spots, whether tissue , included. H&E image used nuclei myofiber segmentation. subset nuclei randomly selected regions 3 timepoints manually annotated train StarDist model segment rest nuclei, myofibers manually segmented. Tissue boundary, nuclei, myofiber, Visium spot polygons stored sf data frames SFE object. See vignette SpatialFeatureExperiment details structure SFE object. SFE object dataset provided SFEData package. Low resolution H&E image tissue section","code":"(sfe <- McKellarMuscleData(\"full\")) #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache #> class: SpatialFeatureExperiment  #> dim: 15123 4992  #> metadata(0): #> assays(1): counts #> rownames(15123): ENSMUSG00000025902 ENSMUSG00000096126 ... #>   ENSMUSG00000064368 ENSMUSG00000064370 #> rowData names(6): Ensembl symbol ... vars cv2 #> colnames(4992): AAACAACGAATAGTTC AAACAAGTATCTCCCA ... TTGTTTGTATTACACG #>   TTGTTTGTGTAAATTC #> colData names(12): barcode col ... prop_mito in_tissue #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : imageX imageY #> imgData names(1): sample_id #>  #> Geometries: #> colGeometries: spotPoly (POLYGON)  #> annotGeometries: tissueBoundary (POLYGON), myofiber_full (POLYGON), myofiber_simplified (POLYGON), nuclei (POLYGON), nuclei_centroid (POINT)  #>  #> Graphs: #> Vis5A:"},{"path":[]},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"spots-in-tissue","dir":"Articles","previous_headings":"Exploratory data analysis","what":"Spots in tissue","title":"ESDA with Visium mouse skeletal muscle dataset","text":"example dataset Visium spots whether tissue , spots intersect tissue used analyses. Total UMI counts (nCounts), number genes detected per spot (nGenes), proportion mitochondrially encoded counts (prop_mito) precomputed colData(sfe). plotSpatialFeature function plots gene, colData values, geometry attributes colGeometry annotGeometry space. Visium spots plotted polygons reflecting actual size relative tissue, rather points packages plot Visium data. Behind scene, geom_sf used plot geometries. tissue boundary found thresholding H&E image removing small polygons likely debris. in_tissue column colData(sfe) indicates Visium spot polygon intersects tissue polygon; can found SpatialFeatureExperiment::annotPred(). scran used data normalization demonstration purposes make data normally distributed, mean best practice normalizing spatial transcriptomics data, don’t know best practice really . seen nCounts plot space , spatial autocorrelation evident. Visium, reverse transcription occurs situ spots, PCR amplification occurs cDNA dissociated spots. artifacts introduced amplification step spatial. Spatial artifacts may arise diffusion transcripts adjacent spots tissue permeablization. However, given total counts seem correspond histological regions, total counts may biological component hence treated technical artifact normalized away scRNA-seq data normalization methods. Myofiber nuclei segmentation polygons available dataset, field annotGeometries. Myofibers manually segmented, nuclei segmented StarDist, trained manually segmented subset.","code":"names(colData(sfe)) #>  [1] \"barcode\"   \"col\"       \"row\"       \"x\"         \"y\"         \"dia\"       #>  [7] \"tissue\"    \"sample_id\" \"nCounts\"   \"nGenes\"    \"prop_mito\" \"in_tissue\" sfe_tissue <- sfe[,colData(sfe)$in_tissue] sfe_tissue <- sfe_tissue[rowSums(counts(sfe_tissue)) > 0,] clusters <- quickCluster(sfe_tissue) sfe_tissue <- computeSumFactors(sfe_tissue, clusters=clusters) #> Warning in (function (x, sizes, min.mean = NULL, positive = FALSE, scaling = #> NULL) : encountered non-positive size factor estimates sfe_tissue <- sfe_tissue[, sizeFactors(sfe_tissue) > 0] sfe_tissue <- logNormCounts(sfe_tissue) annotGeometryNames(sfe_tissue) #> [1] \"tissueBoundary\"      \"myofiber_full\"       \"myofiber_simplified\" #> [4] \"nuclei\"              \"nuclei_centroid\""},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"from-myofibers-and-nuclei-to-visium-spots","dir":"Articles","previous_headings":"Exploratory data analysis > Spots in tissue","what":"From myofibers and nuclei to Visium spots","title":"ESDA with Visium mouse skeletal muscle dataset","text":"plotSpatialFeature() function can also used plot attributes geometries, .e. non-geometry columns sf data frames rowGeometries, colGeometries, annotGeometries fields SFE object. rowGeometries colGeometries, columns associated sf data frames rather rowData colData allowed one can specify columns associate geometries (see st_agr documentation st_sf). attribute annotGeometry plotted along side gene expression colData colGeometry attribute, annotGeometry attribute plotted different color palette distinguish column associated values. , annotGeometries, myofiber polygons plotted, colored cross section area observed tissue section. aes_use argument set color rather fill (default polygons) plot Visium spot outlines make myofiber polygons visible. fill argument set NA make Visium spots look hollow, size argument controls thickness outlines. annot_aes argument specifies column annotGeometry use specify values aesthstic, just like aes ggplot2 (aes_string precise, since tidyeval used ). annot_fixed argument (used ) can set fixed size, alpha, color, etc. annotGeometry.  larger myofibers seem fewer total counts, possibly larger size myofibers dilute transcripts. case, data normalization relevant correct . SpatialFeatureExperiment, can find number myofibers nuclei intersect Visium spot. predicate can anything implemented sf, example, number nuclei fully covered Visium spot can also found. default predicate st_intersects().  one one mapping Visium spots myofibers. However, may want relate attributes myofibers gene expression detected Visium spots. One way summarize attributes myofibers intersect (choose another better predicate implemented sf) spot, calculate mean, median, sum. can done annotSummary() function SpatialFeatureExperiment. default predicate st_intersects(), default summary function mean().  Now can see mean area myofibers intersecting Visium spot relates aspects spots total counts gene expression. NAs spots intersecting myofibers, e.g. inflammatory region. Basic Visium vignette, encountered mysterious two branches two clusters nGenes vs. nCounts plot proportion mitochondrial counts vs. nCounts plot. two clusters seem related myofiber size.","code":"plotSpatialFeature(sfe_tissue, features = \"nCounts\",                     colGeometryName = \"spotPoly\",                    annotGeometryName = \"myofiber_simplified\",                     annot_aes = list(fill = \"area\"),                     aes_use = \"color\", size = 0.5, fill = NA) colData(sfe_tissue)$n_myofibers <-    annotNPred(sfe_tissue, colGeometryName = \"spotPoly\",              annotGeometryName = \"myofiber_simplified\") plotSpatialFeature(sfe_tissue, features = \"n_myofibers\",                     colGeometryName = \"spotPoly\") colData(sfe_tissue)$mean_myofiber_area <-    annotSummary(sfe_tissue, \"spotPoly\", \"myofiber_simplified\",                 annotColNames = \"area\")[,1] # it always returns a data frame # The gray spots don't intersect any myofiber plotSpatialFeature(sfe_tissue, \"mean_myofiber_area\", \"spotPoly\") plotColData(sfe_tissue, x = \"nCounts\", y = \"nGenes\", colour_by = \"mean_myofiber_area\") plotColData(sfe_tissue, x = \"nCounts\", y = \"prop_mito\", colour_by = \"mean_myofiber_area\")"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"myofiber-types","dir":"Articles","previous_headings":"Exploratory data analysis > Spots in tissue","what":"Myofiber types","title":"ESDA with Visium mouse skeletal muscle dataset","text":"Marker genes: Myh7 (Type , slow twitch, aerobic), Myh2 (Type IIa, fast twitch, somewhat aerobic), Myh4 (Type IIb, fast twitch, anareobic), Myh1 (Type IIx, fast twitch, anaerobic), protocol (Wang, Yue, Kuang 2017) First look Type myofibers. fast twitch muscle, don’t expect many slow twitch Type myofibers. Row names sfe_tissue Ensembl IDs, avoid ambiguity sometimes multiple Ensembl IDs gene symbol genes aliases symbol. However, gene symbols shorter human readable Ensembl IDs, nice show plots. plotSpatialFeature() function functions Voyager, even actual row names Ensembl IDs, features argument can take gene symbols column called “symbols” rowData(sfe), function converts gene symbols Ensembl IDs. default, gene symbols shown plot, show_symbol argument can set FALSE show Ensembl IDs instead. one gene symbol matches multiple Ensembl IDs dataset, warning given. exprs_values argument specifies assay use, default “logcounts”, .e. log normalized data. default may may best practice given total UMI counts may biological relevance spatial data. Therefore plotting raw counts log normalized counts .  Marker gene type IIa myofibers shown . interested may change code plot markers tyle IIb IIx myofibers.  Type IIa myofibers also tend clustered together left side tissue. SFE inherits SCE, non-spatial EDA plots scater package can still used.  Plotting proportion mitochondrial counts vs. mean myofiber area, see two clusters, one higher proportion mitochondrial counts smaller area, another lower proportion mitochondrial counts average slightly larger area. Type IIa myofibers tend smaller area larger proportion mitochondrial counts.","code":"markers <- c(I = \"Myh7\", IIa = \"Myh2\", IIb = \"Myh4\", IIx = \"Myh1\") # Function specific for this vignette, with some hard coded values plot_counts_logcounts <- function(sfe, feature) {   p1 <- plotSpatialFeature(sfe, feature, \"spotPoly\",                    annotGeometryName = \"myofiber_simplified\",                     annot_aes = list(fill = \"area\"), aes_use = \"color\",                    fill = NA, size = 0.5, show_symbol = TRUE,                     exprs_values = \"counts\") +     ggtitle(\"Raw counts\")   p2 <- plotSpatialFeature(sfe, feature, \"spotPoly\",                    annotGeometryName = \"myofiber_simplified\",                     annot_aes = list(fill = \"area\"), aes_use = \"color\",                    fill = NA, size = 0.5, show_symbol = TRUE,                     exprs_values = \"logcounts\") +     ggtitle(\"Log normalized counts\")   p1 + p2 +     plot_annotation(title = feature) } plot_counts_logcounts(sfe_tissue, markers[\"I\"]) plot_counts_logcounts(sfe_tissue, markers[\"IIa\"]) gene_id <- rownames(sfe_tissue)[rowData(sfe_tissue)$symbol == markers[\"IIa\"]] plotColData(sfe_tissue, x = \"mean_myofiber_area\", y = \"prop_mito\",              colour_by = gene_id, by_exprs_values = \"logcounts\") #> Warning: Removed 36 rows containing missing values (geom_point)."},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"spatial-neighborhood-graphs","dir":"Articles","previous_headings":"","what":"Spatial neighborhood graphs","title":"ESDA with Visium mouse skeletal muscle dataset","text":"spatial neighborhood graph required compute spatial dependency metrics Moran’s Geary’s C. SpatialFeatureExperiment package wraps methods spdep find spatial neighborhood graphs, stored within SFE object (see spdep documentation gabrielneigh(), knearneigh(), poly2nb(), tri2nb()). Voyager package uses graphs spatial dependency analyses, based spdep first version, methods geospatial packages, also use spatial neighborhood graphs, may added later needed. Visium, spots hexagonal grid, spatial neighborhood graph straightforward. However, spatial technologies single cell resolution (e.g. MERFISH) dataset, myofibers nuclei, many different methods can used find spatial neighborhood graph. myofibers, method “poly2nb” identifies myofiber polygons physically touch . zero.policy = TRUE allow singletons, .e. nodes without neighbors graph; inflamed region, singletons. yet benchmarked spatial neighborhood method “best” situation; particular method used demonstration purpose may may best practice. plotColGraph() function plots graph space associated colGeometry, along geometry interest.  Similarly, plotAnnotGraph() function plots graph associated annotGeometry, along geometry interest.  plotRowGraph yet since haven’t worked dataset spatial graphs related genes relevant, although SFE object supports row graphs.","code":"colGraph(sfe_tissue, \"visium\") <- findVisiumGraph(sfe_tissue) annotGraph(sfe_tissue, \"myofiber_poly2nb\") <-    findSpatialNeighbors(sfe_tissue, type = \"myofiber_simplified\", MARGIN = 3,                        method = \"poly2nb\", zero.policy = TRUE) plotColGraph(sfe_tissue, colGraphName = \"visium\", colGeometryName = \"spotPoly\") plotAnnotGraph(sfe_tissue, annotGraphName = \"myofiber_poly2nb\",                 annotGeometryName = \"myofiber_simplified\")"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"exploratory-spatial-data-analysis","dir":"Articles","previous_headings":"","what":"Exploratory spatial data analysis","title":"ESDA with Visium mouse skeletal muscle dataset","text":"spatial autocorrelation metrics package can computed directly vector matrix rather SFE object. user interface emulates dimension reductions scater package (e.g. calculateUMAP() takes matrix SCE object returns matrix, runUMAP() takes SCE object adds results reducedDims field SCE object). calculate* functions take matrix SFE object directly return results (format results depends structure results), run* functions take SFE object add results object. addition, colData* functions compute metrics numeric variables colData. colGeometry* functions compute metrics numeric columns colGeometry. annotGeometry* functions compute metrics numeric columns annotGeometry.","code":""},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"univariate-global","dir":"Articles","previous_headings":"","what":"Univariate global","title":"ESDA with Visium mouse skeletal muscle dataset","text":"first version, Voyager supports univariate global spatial autocorrelation implemented spdep ESDA: Moran’s Geary’s C, permutation testing Moran’s Geary’s C, Moran plot, correlograms. addition, beyond spdep, Voyager can cluster Moran plots correlograms. Plotting functions taking SFE objects implemented plot results ggplot2 customization options spdep plotting functions. functions calculateUnivariate(), runUnivariate(), colDataUnivariate(), colGeometryUnivariate(), annotGeometryUnivariate() compute univariate spatial statistics. univariate methods implemented R package spdep supported . argument type, indicates corresponding function names spdep, determines spatial statistics computed. demonstrate spatial autocorrelation gene expression, top highly variable genes (HVGs) used. HVGs found scran method. global statistic yields one result entire dataset.","code":"dec <- modelGeneVar(sfe_tissue) hvgs <- getTopHVGs(dec, n = 50)"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"morans-i","dir":"Articles","previous_headings":"Univariate global","what":"Moran’s I","title":"ESDA with Visium mouse skeletal muscle dataset","text":"several ways quantify spatial autocorrelation, common Moran’s : \\[ = \\frac{n}{\\sum_{=1}^n \\sum_{j=1}^n w_{ij}} \\frac{\\sum_{=1}^n \\sum_{j=1}^n w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{=1}^n (x_i - \\bar{x})^2}, \\] \\(n\\) number spots locations, \\(\\) \\(j\\) different locations, spots Visium context, \\(x\\) variable values location, \\(w_{ij}\\) spatial weight, can inversely proportional distance spots indicator whether two spots neighbors, subject various definitions neighborhood whether normalize number neighbors. spdep package uses neighborhood. Moran’s takes values -1 1 row normalized spatial weights. positive spatial autocorrelation, .e. nearby spots tend similar, Moran’s positive. negative spatial autocorrelation, .e. nearby spots tend dissimilar, Moran’s negative. variable distributed space randomly like salt pepper, Moran’s around 0. Positive Moran’s indicates global structure, negative Moran’s indicates local structure. Upon visual inspection, total UMI counts per spot seem spatial autocorrelation. spatial neighborhood graph required compute Moran’s , specified listw argument. matrices, rows features, gene count matrix. “moran” Moran’s , K sample kurtosis. add results SFE object, specifically colData: colData, results added colFeatureData(sfe), features Moran’s calculated NA. column names featureData distinguishes different samples (’s one sample dataset), parsed plotting functions. add results SFE object, specifically geometries: “area” area cross section myofiber seen tissue section “eccentricity” eccentricity ellipse fitted myofiber. non-geometry column colGeometry, colGeometryUnivariate() like annotGeometryUnivariate() , none colGeometries dataset extra columns. gene expression, logcounts assay used default (use exprs_values argument change assay), though may may best practice. metrics computed large number features, parallel computing supported, BiocParallel, BPPARAM argument.","code":"# Directly use vector or matrix, and multiple features can be specified at once calculateUnivariate(t(colData(sfe_tissue)[,c(\"nCounts\", \"nGenes\")]),                      type = \"moran\",                     listw = colGraph(sfe_tissue, \"visium\")) #> DataFrame with 2 rows and 2 columns #>             moran         K #>         <numeric> <numeric> #> nCounts  0.528705   3.00082 #> nGenes   0.384028   3.88036 sfe_tissue <- colDataUnivariate(sfe_tissue, features = c(\"nCounts\", \"nGenes\"),                                 colGraphName = \"visium\", type = \"moran\") head(colFeatureData(sfe_tissue), 10) #> DataFrame with 10 rows and 2 columns #>           moran_Vis5A   K_Vis5A #>             <numeric> <numeric> #> barcode            NA        NA #> col                NA        NA #> row                NA        NA #> x                  NA        NA #> y                  NA        NA #> dia                NA        NA #> tissue             NA        NA #> sample_id          NA        NA #> nCounts      0.528705   3.00082 #> nGenes       0.384028   3.88036 # Remember zero.policy = TRUE since there're singletons sfe_tissue <- annotGeometryUnivariate(sfe_tissue, type = \"moran\",                                       features = c(\"area\", \"eccentricity\"),                                        annotGeometryName = \"myofiber_simplified\",                                       annotGraphName = \"myofiber_poly2nb\",                                        zero.policy = TRUE) head(attr(annotGeometry(sfe_tissue, \"myofiber_simplified\"), \"featureData\")) #> DataFrame with 6 rows and 2 columns #>              moran_Vis5A   K_Vis5A #>                <numeric> <numeric> #> lyr.1                 NA        NA #> area            0.327888   4.95675 #> perimeter             NA        NA #> eccentricity    0.110938   3.26913 #> theta                 NA        NA #> sine_theta            NA        NA sfe_tissue <- runUnivariate(sfe_tissue, type = \"moran\", features = hvgs,                              colGraphName = \"visium\",                              BPPARAM = MulticoreParam(2)) rowData(sfe_tissue)[head(hvgs),] #> DataFrame with 6 rows and 8 columns #>                               Ensembl      symbol            type     means #>                           <character> <character>     <character> <numeric> #> ENSMUSG00000018893 ENSMUSG00000018893          Mb Gene Expression   2.11118 #> ENSMUSG00000027559 ENSMUSG00000027559        Car3 Gene Expression   2.32632 #> ENSMUSG00000056328 ENSMUSG00000056328        Myh1 Gene Expression   4.82572 #> ENSMUSG00000029304 ENSMUSG00000029304        Spp1 Gene Expression   1.63722 #> ENSMUSG00000033196 ENSMUSG00000033196        Myh2 Gene Expression   0.97476 #> ENSMUSG00000050335 ENSMUSG00000050335      Lgals3 Gene Expression   1.43189 #>                         vars       cv2 moran_Vis5A   K_Vis5A #>                    <numeric> <numeric>   <numeric> <numeric> #> ENSMUSG00000018893   74.1782   16.6428    0.761522   1.80210 #> ENSMUSG00000027559   74.3233   13.7336    0.706457   1.76082 #> ENSMUSG00000056328  302.2385   12.9785    0.727282   2.14464 #> ENSMUSG00000029304   60.1583   22.4430    0.656386   1.72563 #> ENSMUSG00000033196   24.0374   25.2984    0.706747   2.45049 #> ENSMUSG00000050335   48.0739   23.4471    0.652904   1.93371"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"gearys-c","dir":"Articles","previous_headings":"Univariate global","what":"Geary’s C","title":"ESDA with Visium mouse skeletal muscle dataset","text":"Another spatial autocorrelation metric Geary’s C, defined : \\[ C = \\frac{(n-1)}{2\\sum_{=1}^n \\sum_{j=1}^n w_{ij}} \\frac{\\sum_{=1}^n \\sum_{j=1}^n w_{ij}(x_i - x_j)^2}{{\\sum_{=1}^n (x_i - \\bar{x})^2}} \\] Geary’s C well 1 indicates positive spatial autocorrelation, 1 indicates negative spatial autocorrelation. Simply replace type = \"moran\" previous section type = \"geary\" compute Geary’s C features interest add results SFE object. example, colData ’s one column K since ’s Moran’s Geary’s C. Moran’s Geary’s C suggest positive spatial autocorrelation nCounts nGenes. univariate global methods, including permutation testing Moran’s Geary’s C, correlograms, Moran scatter plot can also called functions runUnivariate, specifying type argument. See documentation runUnivariate see available methods see documentation corresponding spdep functions see extra arguments required method.","code":"sfe_tissue <- colDataUnivariate(sfe_tissue, features = c(\"nCounts\", \"nGenes\"),                                 colGraphName = \"visium\", type = \"geary\") head(colFeatureData(sfe_tissue), 10) #> DataFrame with 10 rows and 3 columns #>           moran_Vis5A   K_Vis5A geary_Vis5A #>             <numeric> <numeric>   <numeric> #> barcode            NA        NA          NA #> col                NA        NA          NA #> row                NA        NA          NA #> x                  NA        NA          NA #> y                  NA        NA          NA #> dia                NA        NA          NA #> tissue             NA        NA          NA #> sample_id          NA        NA          NA #> nCounts      0.528705   3.00082    0.474892 #> nGenes       0.384028   3.88036    0.605797"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"permutation-testing","dir":"Articles","previous_headings":"Univariate global","what":"Permutation testing","title":"ESDA with Visium mouse skeletal muscle dataset","text":"spatial autocorrelation statistically significant? moran.test() function spdep can give analytic p-value p-value accurate data normally distributed. gene expression data generally normally distributed data normalization doesn’t necessarily make data close normal distribution, permutation testing used package test significance Moran’s Geary’s C, wrapping moran.mc() spdep. “mc” stands Monte Carlo. nsim argument specifies number simulations. Add results SFE object Note test performed multiple features, p-values corrected multiple hypothesis testing. results can plotted:  default, colorblind friendly palette dittoSeq used categorical variables. density Moran’s simulations values permuted disconnected spatial locations, vertical line actual Moran’s value. simulation indicates spatial autocorrelation significant. Use type = \"geary.mc\" permutation testing Geary’s C.","code":"set.seed(29) sfe_tissue <- colDataUnivariate(sfe_tissue, features = c(\"nCounts\", \"nGenes\"),                                  colGraphName = \"visium\", nsim = 100,                                 type = \"moran.mc\") head(colFeatureData(sfe_tissue), 10) #> DataFrame with 10 rows and 10 columns #>           moran_Vis5A   K_Vis5A geary_Vis5A moran.mc_statistic_Vis5A #>             <numeric> <numeric>   <numeric>                <numeric> #> barcode            NA        NA          NA                       NA #> col                NA        NA          NA                       NA #> row                NA        NA          NA                       NA #> x                  NA        NA          NA                       NA #> y                  NA        NA          NA                       NA #> dia                NA        NA          NA                       NA #> tissue             NA        NA          NA                       NA #> sample_id          NA        NA          NA                       NA #> nCounts      0.528705   3.00082    0.474892                 0.528705 #> nGenes       0.384028   3.88036    0.605797                 0.384028 #>           moran.mc_parameter_Vis5A moran.mc_p.value_Vis5A #>                          <numeric>              <numeric> #> barcode                         NA                     NA #> col                             NA                     NA #> row                             NA                     NA #> x                               NA                     NA #> y                               NA                     NA #> dia                             NA                     NA #> tissue                          NA                     NA #> sample_id                       NA                     NA #> nCounts                        101             0.00990099 #> nGenes                         101             0.00990099 #>           moran.mc_alternative_Vis5A  moran.mc_method_Vis5A #>                          <character>            <character> #> barcode                           NA                     NA #> col                               NA                     NA #> row                               NA                     NA #> x                                 NA                     NA #> y                                 NA                     NA #> dia                               NA                     NA #> tissue                            NA                     NA #> sample_id                         NA                     NA #> nCounts                      greater Monte-Carlo simulati.. #> nGenes                       greater Monte-Carlo simulati.. #>           moran.mc_data.name_Vis5A                      moran.mc_res_Vis5A #>                        <character>                                  <list> #> barcode                         NA                                      NA #> col                             NA                                      NA #> row                             NA                                      NA #> x                               NA                                      NA #> y                               NA                                      NA #> dia                             NA                                      NA #> tissue                          NA                                      NA #> sample_id                       NA                                      NA #> nCounts    x[i, ] \\nweights: lis.. -0.02045171,-0.00751797,-0.01501879,... #> nGenes     x[i, ] \\nweights: lis..    -0.0153233,-0.0220234,-0.0213725,... plotMoranMC(sfe_tissue, c(\"nCounts\", \"nGenes\"))"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"correlogram","dir":"Articles","previous_headings":"Univariate global","what":"Correlogram","title":"ESDA with Visium mouse skeletal muscle dataset","text":"’s length scale spatial autocorrelation? correlogram, spatial autocorrelation higher orders neighbors (e.g. second order neighbors neighbors neighbors) calculated see decays orders. Visium, regular hexagonal grid, order neighbors proxy distance. irregular patterns single cells, different methods find spatial neighbors may give different results. colData, Moran’s correlogram: results can plotted plotCorrelogram  error bars twice standard deviation Moran’s value. standard deviation p-values (null hypothesis Moran’s 0) come moran.test() (Geary’s C correlogram, geary.test()); taken grain salt data normally distributed. p-values corrected multiple hypothesis testing across orders features. usual, . means p < 0.1, * means p < 0.05, ** means p < 0.01, *** means p < 0.001. , can done Geary’s C, colData, annotGeometry, etc.","code":"sfe_tissue <- runUnivariate(sfe_tissue, hvgs[1:2], colGraphName = \"visium\",                              order = 10, type = \"sp.correlogram\") plotCorrelogram(sfe_tissue, hvgs[1:2])"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"moran-scatter-plot","dir":"Articles","previous_headings":"Univariate global","what":"Moran scatter plot","title":"ESDA with Visium mouse skeletal muscle dataset","text":"Moran scatter plot, x axis value y axis average value neighbors. slope fitted line Moran’s . Sometimes clusters appear plot, showing different kinds neighborhoods value. gene expression, use one gene (log normalized value) demonstrate:  dashed lines mark mean Myh2 spatially lagged Myh2. singletons . Visium spots lower Myh2 expression neighbors don’t express Myh2 spots don’t express Myh2 usually least neighbors . 2 main clusters spots whose neighbors express Myh2: high (average) expression whose neighbors also high expression, low expression whose neighbors also low expression. features may show different kinds clusters. can use k-means clustering identify clusters, though clustering method supported bluster package can used.  Plot clusters space  can also done colData, annotGeometry, etc. Moran’s permutation testing.","code":"sfe_tissue <- runUnivariate(sfe_tissue, \"Myh2\", colGraphName = \"visium\",                              type = \"moran.plot\") moranPlot(sfe_tissue, \"Myh2\", graphName = \"visium\") set.seed(29) clusts <- clusterMoranPlot(sfe_tissue, \"Myh2\", BLUSPARAM = KmeansParam(2)) moranPlot(sfe_tissue, \"Myh2\", graphName = \"visium\", colour_by = clusts$ENSMUSG00000033196) #> Warning in value[[3L]](cond): Too few points for stat_density2d, not plotting #> contours. colData(sfe_tissue)$Myh2_moranPlot_clust <- clusts$ENSMUSG00000033196 plotSpatialFeature(sfe_tissue, \"Myh2_moranPlot_clust\", colGeometryName = \"spotPoly\")"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"univariate-local","dir":"Articles","previous_headings":"","what":"Univariate local","title":"ESDA with Visium mouse skeletal muscle dataset","text":"Local statistics yield result location rather whole dataset, global statistics may obscure local heterogeneity. Local statistics stored localResults field SFE object, can accessed localResult() localResults() functions SpatialFeatureExperiment package.","code":""},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"local-morans-i","dir":"Articles","previous_headings":"Univariate local","what":"Local Moran’s I","title":"ESDA with Visium mouse skeletal muscle dataset","text":"recap, global Moran’s (Anselin 1995) defined \\[ = \\frac{n}{\\sum_{=1}^n \\sum_{j=1}^n w_{ij}} \\frac{\\sum_{=1}^n \\sum_{j=1}^n w_{ij} (x_i - \\bar{x})(x_j - \\bar{x})}{\\sum_{=1}^n (x_i - \\bar{x})^2}. \\] Local Moran’s defined \\[ I_i = (n-1)\\frac{(x_i - \\bar{x})\\sum_{j=1}^n w_{ij} (x_j - \\bar{x})}{\\sum_{=1}^n (x_i - \\bar{x})^2}. \\] ’s similar global Moran’s , values locations \\(\\) summed ’s normalization sum spatial weights. Plot log normalized Myh2 gene expression context interpret local results   seems regions higher Myh2 expression also stronger spatial autocorrelation. interesting see spatial autocorrelation relates gene expression level, much finding variance relates mean expression gene, usually indicates overdispersion compared Poisson scRNA-seq Visium data.  gene, Visium spots higher expression also tend higher local Moran’s , may may apply genes. Local spatial analyses often return matrix data frame results. plotLocalResult() function default column local spatial method, columns can plotted well. Use localResultAttrs() function see columns present, use attribute argument specify column plot. local spatial methods return p-values location, column name like Pr(z != E(Ii)), test two sided (default, can changed alternative argument runUnivariate() passed relevant underlying function spdep). Negative log p-value computed facilitate visualization, p-value corrected multiple hypothesis testing p.adjustSP() spdep, number tests number neighbors location rather total number locations (-log10p_adj).  plot following plots p-values, divergent palette used show locations significant adjusting multiple testing significant different colors. center divergent palette p = 0.05, bluish spots significant dark brown means really significant. “pysal” column indicates quadrant relative means Moran plot. result similar k-means clustering .","code":"sfe_tissue <- runUnivariate(sfe_tissue, type = \"localmoran\", features = \"Myh2\",                             colGraphName = \"visium\") plotSpatialFeature(sfe_tissue, features = \"Myh2\", colGeometryName = \"spotPoly\") plotLocalResult(sfe_tissue, \"localmoran\", features = \"Myh2\",                  colGeometryName = \"spotPoly\",divergent = TRUE,                 diverge_center = 0) qplot(logcounts(sfe_tissue)[rowData(sfe_tissue)$symbol == \"Myh2\",],       localResult(sfe_tissue, \"localmoran\", \"Myh2\")[,\"Ii\"],       xlab = \"Myh2 (log counts)\", ylab = \"localmoran\", alpha = I(0.3)) localResultAttrs(sfe_tissue, \"localmoran\", \"Myh2\") #>  [1] \"Ii\"             \"E.Ii\"           \"Var.Ii\"         \"Z.Ii\"           #>  [5] \"Pr(z != E(Ii))\" \"mean\"           \"median\"         \"pysal\"          #>  [9] \"-log10p\"        \"-log10p_adj\" plotLocalResult(sfe_tissue, \"localmoran\", features = \"Myh2\",                  colGeometryName = \"spotPoly\", attribute = \"-log10p_adj\", divergent = TRUE,                 diverge_center = -log10(0.05)) plotLocalResult(sfe_tissue, \"localmoran\", features = \"Myh2\",                  colGeometryName = \"spotPoly\", attribute = \"pysal\")"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"getis-ord-gi","dir":"Articles","previous_headings":"Univariate local","what":"Getis-Ord Gi*","title":"ESDA with Visium mouse skeletal muscle dataset","text":"Getis-Ord Gi* used find hotspots coldspots feature space. hotspot cluster high values space, coldspot cluster low values space. Getis-Ord Gi* essentially z-score spatially lagged value feature location \\(\\) ($j w{ij}x_j $), \\(w_{ij}\\) spatial weight. original publication Getis-Ord Gi* 1992 (Getis Ord 1992), spatial weight distance-based binary weight indicating whether another location within certain distance location \\(\\). Getis-Ord Gi excludes location \\(\\) computation mean variance lagged value, Gi* includes location \\(\\) . Usually Gi Gi* yield similar results. mean variance used z-score differ Gi Gi* described paper 1995 (J. K. Ord Getis 1995) derived 1992 paper . Binary weights recommended Getis-Ord Gi*.  High values Gi* indicate hotspots, low values Gi* indicate coldspots. Plot pseudo-p-values simulation  hotspots expected. Local results can also computed annotation geometries.   hotspots coldspots expected.","code":"colGraph(sfe_tissue, \"visium_B\") <- findVisiumGraph(sfe_tissue, style = \"B\") sfe_tissue <- runUnivariate(sfe_tissue, type = \"localG_perm\", features = \"Myh2\",                             colGraphName = \"visium_B\", include_self = TRUE) plotLocalResult(sfe_tissue, \"localG_perm\", features = \"Myh2\",                  colGeometryName = \"spotPoly\", divergent = TRUE,                 diverge_center = 0) localResultAttrs(sfe_tissue, \"localG_perm\", \"Myh2\") #>  [1] \"localG\"             \"Gi\"                 \"E.Gi\"               #>  [4] \"Var.Gi\"             \"Pr(z != E(Gi))\"     \"Pr(z != E(Gi)) Sim\" #>  [7] \"Pr(folded) Sim\"     \"Skewness\"           \"Kurtosis\"           #> [10] \"-log10p Sim\"        \"-log10p_adj Sim\" plotLocalResult(sfe_tissue, \"localG_perm\", features = \"Myh2\",                  attribute = \"-log10p_adj Sim\",                 colGeometryName = \"spotPoly\", divergent = TRUE,                 diverge_center = -log10(0.05)) annotGraph(sfe_tissue, \"myofiber_poly2nb_B\") <-    findSpatialNeighbors(sfe_tissue, type = \"myofiber_simplified\", MARGIN = 3,                        method = \"poly2nb\", zero.policy = TRUE, style = \"B\") sfe_tissue <- annotGeometryUnivariate(sfe_tissue, \"localG_perm\", \"area\",                                        annotGeometryName = \"myofiber_simplified\",                                       annotGraphName = \"myofiber_poly2nb_B\",                                       include_self = TRUE, zero.policy = TRUE) plotLocalResult(sfe_tissue, \"localG_perm\", \"area\",                  annotGeometryName = \"myofiber_simplified\",                 divergent = TRUE, diverge_center = 0) plotLocalResult(sfe_tissue, \"localG_perm\", \"area\",                  annotGeometryName = \"myofiber_simplified\",                 attribute = \"-log10p_adj Sim\",                 divergent = TRUE, diverge_center = -log10(0.05))"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"local-spatial-heteroscedasticity-losh","dir":"Articles","previous_headings":"Univariate local","what":"Local spatial heteroscedasticity (LOSH)","title":"ESDA with Visium mouse skeletal muscle dataset","text":"LOSH (J. Keith Ord Getis 2012) defined \\[ H_i = \\frac{\\sum_j w_{ij}\\left| e_j \\right|^}{h_1\\sum_j w_{ij}} \\] \\(h_1 = \\sum_i \\left| e_i \\right|^/n\\) \\(e_j = x_j - \\bar{x}_j\\), \\[ \\bar{x}_j = \\frac{\\sum_j w_{jk}x_k}{\\sum_j w_{jk}}. \\] default, \\(= 2\\) LOSH like local variance. See (J. Keith Ord Getis 2012) details interpretation.  gene, isn’t clear whether LOSH relates gene expression levels. Voyager wrap LOSH.mc() perform permutation testing LOSH, time consuming. Chi-square approximation described 2012 LOSH paper account non-normality data approximate mean variance permutation distributions, p-values LOSH can quickly computed, LOSH.cs().  gene, local conditions mostly homogenous, exceptions around edge tissue.","code":"sfe_tissue <- runUnivariate(sfe_tissue, \"LOSH.cs\", \"Myh2\",                              colGraphName = \"visium\") plotLocalResult(sfe_tissue, \"LOSH.cs\", features = \"Myh2\",                  colGeometryName = \"spotPoly\") localResultAttrs(sfe_tissue, \"LOSH.cs\", \"Myh2\") #> [1] \"Hi\"          \"E.Hi\"        \"Var.Hi\"      \"Z.Hi\"        \"x_bar_i\"     #> [6] \"ei\"          \"Pr()\"        \"-log10p\"     \"-log10p_adj\" plotLocalResult(sfe_tissue, \"LOSH.cs\", features = \"Myh2\",                  attribute = \"-log10p_adj\", colGeometryName = \"spotPoly\",                 divergent = TRUE, diverge_center = -log10(0.05))"},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"ESDA with Visium mouse skeletal muscle dataset","text":"first version Voyager, univariate spatial autocorrelation metrics supported. Anisotropy, bivariate, multivariate spatial analyses added later versions. plotting functions don’t plot H&E image background. implemented first version since Visium spots plotted, block H&E image anyway. Also, plots small interactive, good enough visualizing gene expression Visium spots, H&E image informative zoomed . Interactive data visualization beyond scope package. ’s convoluted trick geom_sf flipping y axis, since coordinates pixels full resolution image image origin top left. 2D data supported present, although principle, sf GEOS support 3D data.","code":""},{"path":"https://pachterlab.github.io/Voyager/articles/vig2_visium.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"ESDA with Visium mouse skeletal muscle dataset","text":"","code":"sessionInfo() #> R version 4.2.1 (2022-06-23) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] bluster_1.7.0                   BiocParallel_1.30.4             #>  [3] patchwork_1.1.2                 scales_1.2.1                    #>  [5] sf_1.0-8                        SFEData_0.99.5                  #>  [7] scran_1.24.1                    scater_1.24.0                   #>  [9] ggplot2_3.3.6                   scuttle_1.7.4                   #> [11] SingleCellExperiment_1.18.1     SummarizedExperiment_1.26.1     #> [13] Biobase_2.57.1                  GenomicRanges_1.48.0            #> [15] GenomeInfoDb_1.33.13            IRanges_2.31.2                  #> [17] S4Vectors_0.35.4                BiocGenerics_0.43.4             #> [19] MatrixGenerics_1.9.1            matrixStats_0.62.0              #> [21] SpatialFeatureExperiment_0.99.8 Voyager_0.99.5                  #>  #> loaded via a namespace (and not attached): #>   [1] AnnotationHub_3.5.2           BiocFileCache_2.4.0           #>   [3] systemfonts_1.0.4             igraph_1.3.5                  #>   [5] splines_4.2.1                 sp_1.5-0                      #>   [7] digest_0.6.30                 htmltools_0.5.3               #>   [9] viridis_0.6.2                 magick_2.7.3                  #>  [11] fansi_1.0.3                   magrittr_2.0.3                #>  [13] memoise_2.0.1                 ScaledMatrix_1.5.1            #>  [15] SpatialExperiment_1.6.1       cluster_2.1.3                 #>  [17] limma_3.53.10                 Biostrings_2.65.6             #>  [19] R.utils_2.12.0                pkgdown_2.0.6                 #>  [21] colorspace_2.0-3              rappdirs_0.3.3                #>  [23] blob_1.2.3                    ggrepel_0.9.1                 #>  [25] textshaping_0.3.6             xfun_0.34                     #>  [27] dplyr_1.0.10                  crayon_1.5.2                  #>  [29] RCurl_1.98-1.9                jsonlite_1.8.2                #>  [31] glue_1.6.2                    gtable_0.3.1                  #>  [33] zlibbioc_1.43.0               XVector_0.37.1                #>  [35] DelayedArray_0.23.2           scico_1.3.1                   #>  [37] BiocSingular_1.13.1           DropletUtils_1.17.3           #>  [39] Rhdf5lib_1.19.2               HDF5Array_1.25.2              #>  [41] DBI_1.1.3                     edgeR_3.39.6                  #>  [43] Rcpp_1.0.9                    isoband_0.2.6                 #>  [45] xtable_1.8-4                  viridisLite_0.4.1             #>  [47] spData_2.2.0                  units_0.8-0                   #>  [49] dqrng_0.3.0                   bit_4.0.4                     #>  [51] spdep_1.2-7                   rsvd_1.0.5                    #>  [53] proxy_0.4-27                  httr_1.4.4                    #>  [55] metapod_1.5.0                 RColorBrewer_1.1-3            #>  [57] ellipsis_0.3.2                wk_0.7.0                      #>  [59] farver_2.1.1                  pkgconfig_2.0.3               #>  [61] R.methodsS3_1.8.2             dbplyr_2.2.1                  #>  [63] sass_0.4.2                    deldir_1.0-6                  #>  [65] locfit_1.5-9.6                utf8_1.2.2                    #>  [67] labeling_0.4.2                AnnotationDbi_1.59.1          #>  [69] later_1.3.0                   tidyselect_1.2.0              #>  [71] rlang_1.0.6                   munsell_0.5.0                 #>  [73] BiocVersion_3.16.0            tools_4.2.1                   #>  [75] cachem_1.0.6                  cli_3.4.1                     #>  [77] ExperimentHub_2.5.0           generics_0.1.3                #>  [79] RSQLite_2.2.18                evaluate_0.17                 #>  [81] stringr_1.4.1                 fastmap_1.1.0                 #>  [83] yaml_2.3.6                    ragg_1.2.3                    #>  [85] knitr_1.40                    bit64_4.0.5                   #>  [87] fs_1.5.2                      purrr_0.3.5                   #>  [89] s2_1.1.0                      KEGGREST_1.36.3               #>  [91] nlme_3.1-157                  sparseMatrixStats_1.8.0       #>  [93] mime_0.12                     R.oo_1.25.0                   #>  [95] compiler_4.2.1                png_0.1-7                     #>  [97] interactiveDisplayBase_1.34.0 filelock_1.0.2                #>  [99] curl_4.3.3                    beeswarm_0.4.0                #> [101] e1071_1.7-11                  tibble_3.1.8                  #> [103] statmod_1.4.37                bslib_0.4.0                   #> [105] stringi_1.7.8                 highr_0.9                     #> [107] desc_1.4.2                    lattice_0.20-45               #> [109] Matrix_1.5-1                  classInt_0.4-8                #> [111] vctrs_0.4.2                   pillar_1.8.1                  #> [113] lifecycle_1.0.3               rhdf5filters_1.9.0            #> [115] BiocManager_1.30.18           jquerylib_0.1.4               #> [117] BiocNeighbors_1.14.0          cowplot_1.1.1                 #> [119] bitops_1.0-7                  irlba_2.3.5.1                 #> [121] httpuv_1.6.6                  R6_2.5.1                      #> [123] promises_1.2.0.1              KernSmooth_2.23-20            #> [125] gridExtra_2.3                 vipor_0.4.5                   #> [127] codetools_0.2-18              MASS_7.3-57                   #> [129] boot_1.3-28                   assertthat_0.2.1              #> [131] rhdf5_2.40.0                  rprojroot_2.0.3               #> [133] rjson_0.2.21                  withr_2.5.0                   #> [135] GenomeInfoDbData_1.2.8        mgcv_1.8-40                   #> [137] parallel_4.2.1                grid_4.2.1                    #> [139] beachmat_2.13.4               class_7.3-20                  #> [141] rmarkdown_2.17                DelayedMatrixStats_1.18.2     #> [143] ggnewscale_0.4.8              shiny_1.7.2                   #> [145] ggbeeswarm_0.6.0"},{"path":[]},{"path":"https://pachterlab.github.io/Voyager/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lambda Moses. Author, maintainer. Lior Pachter. Author, thesis advisor.","code":""},{"path":"https://pachterlab.github.io/Voyager/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moses L, Pachter L (2022). Voyager: geospatial spatial omics. R package version 0.99.5, https://github.com/pachterlab/Voyager.","code":"@Manual{,   title = {Voyager: From geospatial to spatial omics},   author = {Lambda Moses and Lior Pachter},   year = {2022},   note = {R package version 0.99.5},   url = {https://github.com/pachterlab/Voyager}, }"},{"path":"https://pachterlab.github.io/Voyager/index.html","id":"from-geospatial-to-spatial-transcriptomics","dir":"","previous_headings":"","what":"From geospatial to spatial omics","title":"From geospatial to spatial omics","text":"Rules documentation branch: purpose branch make pkgdown website longer detailed vignettes make installed size package way large comply Bioconductor’s 5 MB rule. Don’t change anything outside vignettes directory branch. code doesn’t work, change main devel branch merge branch. way large vignettes won’t get main branch code kept consistent, important since pkgdown website also documents functions package. Exception previous rule: may add packages Suggests field DESCRIPTION extra packages used vignettes. trigger new GitHub Action build website, add tag git tag <tag name> push . Action run tag pushed. tag name can something like “update_visium”. push tag, use git push origin <tag name> addition git push origin documentation. file vignettes/ref.bib automatically synced Paperpile. Don’t edit hand. package brings tradition geospatial statistics spatial omics wrapping classical geospatial packages spdep adespatial used SpatialFeatureExperiment class, extends SpatialExperiment sf.","code":""},{"path":"https://pachterlab.github.io/Voyager/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"From geospatial to spatial omics","text":"package submitted Bioconductor. accepted, can installed development version Voyager GitHub :","code":"if (!requireNamespace(\"BiocManager\")) install.packages(\"BiocManager\") BiocManager::install(\"Voyager\") # install.packages(\"remotes\") remotes::install_github(\"pachterlab/Voyager\")"},{"path":"https://pachterlab.github.io/Voyager/reference/ElbowPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the elbow plot or scree plot for PCA — ElbowPlot","title":"Plot the elbow plot or scree plot for PCA — ElbowPlot","text":"Apparently, apparent way plot PC elbow plot extracting variance explained attribute dimred slot, even OSCA book makes elbow plot way, find kind cumbersome compared Seurat. writing function make elbow plot SCE less cumbersome.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/ElbowPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the elbow plot or scree plot for PCA — ElbowPlot","text":"","code":"ElbowPlot(sce, ndims = 20, reduction = \"PCA\")"},{"path":"https://pachterlab.github.io/Voyager/reference/ElbowPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the elbow plot or scree plot for PCA — ElbowPlot","text":"sce SingleCellExperiment object, anything inherits SingleCellExperiment. ndims Number PCs plot. reduction Name dimension reduction use. must attribute called \"percentVar\". Defaults \"PCA\".","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/ElbowPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the elbow plot or scree plot for PCA — ElbowPlot","text":"ggplot object. y axis percentage variance explained.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/ElbowPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the elbow plot or scree plot for PCA — ElbowPlot","text":"","code":"library(SFEData) library(scater) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians #> Loading required package: scuttle #> Loading required package: ggplot2 sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache #> require(“SpatialFeatureExperiment”) sfe <- runPCA(sfe, ncomponents = 10, exprs_values = \"counts\") ElbowPlot(sfe, ndims = 10)"},{"path":"https://pachterlab.github.io/Voyager/reference/calculateUnivariate.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate spatial stiatistics — calculateUnivariate","title":"Univariate spatial stiatistics — calculateUnivariate","text":"functions compute univariate spatial statistics, global local, matrices, data frames, SFE objects. SFE objects, statistics can computed numeric columns colData, colGeometries, annotGeometries, results stored within SFE object. calculateMoransI runMoransI convenience wrappers calculateUnivariate runUnivariate respectively.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/calculateUnivariate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate spatial stiatistics — calculateUnivariate","text":"","code":"# S4 method for ANY calculateUnivariate(   x,   listw,   type = c(\"moran\", \"geary\", \"moran.mc\", \"geary.mc\", \"moran.test\", \"geary.test\",     \"globalG.test\", \"sp.correlogram\", \"moran.plot\", \"localmoran\", \"localmoran_perm\",     \"localC\", \"localC_perm\", \"localG\", \"localG_perm\", \"LOSH\", \"LOSH.mc\", \"LOSH.cs\",     \"gwss\"),   BPPARAM = SerialParam(),   zero.policy = NULL,   returnDF = TRUE,   p.adjust.method = \"BH\",   ... )  # S4 method for SpatialFeatureExperiment calculateUnivariate(   x,   type,   features = NULL,   colGraphName = 1L,   sample_id = NULL,   exprs_values = \"logcounts\",   BPPARAM = SerialParam(),   zero.policy = NULL,   returnDF = TRUE,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  # S4 method for ANY calculateMoransI(x, ..., BPPARAM = SerialParam(), zero.policy = NULL)  # S4 method for SpatialFeatureExperiment calculateMoransI(   x,   features = NULL,   colGraphName = 1L,   sample_id = NULL,   exprs_values = \"logcounts\",   BPPARAM = SerialParam(),   zero.policy = NULL,   returnDF = TRUE,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  colDataUnivariate(   x,   type,   features,   colGraphName = 1L,   sample_id = NULL,   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  colDataMoransI(   x,   features,   colGraphName = 1L,   sample_id = NULL,   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  colGeometryUnivariate(   x,   type,   features,   colGeometryName = 1L,   colGraphName = 1L,   sample_id = NULL,   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  colGeometryMoransI(   x,   features,   colGeometryName = 1L,   colGraphName = 1L,   sample_id = NULL,   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  annotGeometryUnivariate(   x,   type,   features,   annotGeometryName = 1L,   annotGraphName = 1L,   sample_id = NULL,   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  annotGeometryMoransI(   x,   features,   annotGeometryName = 1L,   annotGraphName = 1L,   sample_id = NULL,   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  runUnivariate(   x,   type,   features,   colGraphName = 1L,   sample_id = NULL,   exprs_values = \"logcounts\",   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )  runMoransI(   x,   features = NULL,   colGraphName = 1L,   sample_id = NULL,   exprs_values = \"logcounts\",   BPPARAM = SerialParam(),   zero.policy = NULL,   include_self = FALSE,   p.adjust.method = \"BH\",   ... )"},{"path":"https://pachterlab.github.io/Voyager/reference/calculateUnivariate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate spatial stiatistics — calculateUnivariate","text":"x numeric matrix whose rows features/genes, SpatialFeatureExperiment (SFE) object matrix assay. listw Weighted neighborhood graph spdep listw object. type integer specifying index string specifying name *Geometry query replace. missing, first item *Geometries returned replaced. BPPARAM BiocParallelParam object specifying whether computing metric numerous genes shall parallelized. zero.policy default NULL, use global option value; TRUE assign zero lagged value zones without neighbours, FALSE assign NA returnDF Logical, results added SFE object, whether results formatted DataFrame. p.adjust.method Method correct multiple testing, passed p.adjustSP. Methods allowed p.adjust.methods. ... arguments passed S4 method (convenience wrappers like calculateMoransI) method used compute metrics specified argument type (general functions like calculateUnivariate). See documentation spdep package latter. features Genes (calculate* SFE method run*) numeric columns colData(x) (colData*) colGeometry (colGeometry*) annotGeometry (annotGeometry*) univariate metric computed. Default NULL. NULL, metric computed genes values assay specified argument exprs_values. can parallelized argument BPPARAM. genes, column \"symbol\" present rowData row names SFE object Ensembl IDs, gene symbol can used converted IDs behind scene. However, one symbol matches multiple IDs, warning given first match used. Internally, results always stored Ensembl ID rather symbol. colGraphName Name listw graph SFE object corresponds entities represented columns gene count matrix. Use colGraphNames look names available graphs cells/spots. Note multiple sample_ids, assumed graph name. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. exprs_values Integer scalar string indicating assay x contains expression values. include_self Logical, whether spatial neighborhood graph include edges location . Getis-Ord Gi* localG localG_perm, used method. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. annotGeometryName Name annotGeometry sf data frame whose numeric columns interest used compute metric. Use annotGeometryNames look names sf data frames associated annotations. annotGraphName Name listw graph SFE object corresponds annotGeometry interest. Use annotGraphNames look names available annotation graphs.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/calculateUnivariate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate spatial stiatistics — calculateUnivariate","text":"calculateUnivariate, returnDF = TRUE,  DataFrame, otherwise list element results   feature. run*, SpatialFeatureExperiment object   results added. See Details results stored.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/calculateUnivariate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Univariate spatial stiatistics — calculateUnivariate","text":"univariate methods package spdep supported . methods global, meaning returning one result spatial locations dataset: moran, geary, moran.mc, geary.mc, moran.test, geary.test, globalG.test, sp.correlogram. following methods local, meaning location results: moran.plot, localmoran, localmoran_perm, localC, localC_perm, localG, localG_perm, LOSH, LOSH.mc, LOSH.cs. GWmodel::gwss method supported soon, supported yet. Global results genes stored rowData. colGeometry annotGeometry, results added attribute data frame called featureData, DataFrame analogous rowData gene count matrix. New column names featureData follow rules rowData. colData, results can accessed colFeatureData function. Local results stored field localResults field SFE object, can accessed localResults localResult. results p-values, -log10 p Benjamin-Hochberg corrected -log10 p added. Note multiple testing correction, p.adjustSP used.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/calculateUnivariate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate spatial stiatistics — calculateUnivariate","text":"","code":"library(SpatialFeatureExperiment) library(SingleCellExperiment) library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) features_use <- rownames(sfe)[1:5]  # Moran's I moran_results <- calculateMoransI(sfe,     features = features_use,     colGraphName = \"visium\",     exprs_values = \"counts\" )  # This does not advocate for computing Moran's I on raw counts. # Just an example for function usage.  sfe <- runMoransI(sfe,     features = features_use, colGraphName = \"visium\",     exprs_values = \"counts\" ) # Look at the results head(rowData(sfe)) #> DataFrame with 6 rows and 8 columns #>                               Ensembl      symbol            type       means #>                           <character> <character>     <character>   <numeric> #> ENSMUSG00000025902 ENSMUSG00000025902       Sox17 Gene Expression 0.007612179 #> ENSMUSG00000096126 ENSMUSG00000096126     Gm22307 Gene Expression 0.000200321 #> ENSMUSG00000033845 ENSMUSG00000033845      Mrpl15 Gene Expression 0.075921474 #> ENSMUSG00000025903 ENSMUSG00000025903      Lypla1 Gene Expression 0.057491987 #> ENSMUSG00000033813 ENSMUSG00000033813       Tcea1 Gene Expression 0.052283654 #> ENSMUSG00000002459 ENSMUSG00000002459       Rgs20 Gene Expression 0.000200321 #>                           vars       cv2 moran_Vis5A   K_Vis5A #>                      <numeric> <numeric>   <numeric> <numeric> #> ENSMUSG00000025902 0.008757912  151.1411  -0.0424335  13.32749 #> ENSMUSG00000096126 0.000200321 4992.0000         NaN       NaN #> ENSMUSG00000033845 0.114250804   19.8212   0.2485804   5.41594 #> ENSMUSG00000025903 0.080645121   24.3985   0.0070062   9.46309 #> ENSMUSG00000033813 0.073603279   26.9256   0.1592157   8.51384 #> ENSMUSG00000002459 0.000200321 4992.0000          NA        NA  # Local Moran's I sfe <- runUnivariate(sfe,     type = \"localmoran\", features = features_use,     colGraphName = \"visium\", exprs_values = \"counts\" ) head(localResult(sfe, \"localmoran\", features_use[1])) #>                           Ii         E.Ii     Var.Ii       Z.Ii Pr(z != E(Ii)) #> AAATTACCTATCGATG -0.02897069 -0.001345388 0.01609308 -0.2177647     0.82761246 #> AACATATCAACTGGTG -0.29141104 -0.001345388 0.01609308 -2.2865292     0.02222332 #> AAGATTGGCGGAACGT  0.10224949 -0.001345388 0.01958757  0.7401981     0.45917982 #> AAGGGACAGATTCTGT -0.02897069 -0.001345388 0.01609308 -0.2177647     0.82761246 #> AATATCGAGGGTTCTC  0.10224949 -0.001345388 0.01609308  0.8166176     0.41414701 #> AATGATGATACGCTAT  0.10224949 -0.001345388 0.01609308  0.8166176     0.41414701 #>                      mean   median    pysal    -log10p -log10p_adj #> AAATTACCTATCGATG Low-High Low-High Low-High 0.08217298   0.0000000 #> AACATATCAACTGGTG Low-High Low-High Low-High 1.65319110   0.8080931 #> AAGATTGGCGGAACGT  Low-Low  Low-Low  Low-Low 0.33801720   0.0000000 #> AAGGGACAGATTCTGT Low-High Low-High Low-High 0.08217298   0.0000000 #> AATATCGAGGGTTCTC  Low-Low  Low-Low  Low-Low 0.38284547   0.0000000 #> AATGATGATACGCTAT  Low-Low  Low-Low  Low-Low 0.38284547   0.0000000  # For colData sfe <- colDataUnivariate(sfe,     type = \"localmoran\", features = \"nCounts\",     colGraphName = \"visium\" ) head(localResult(sfe, \"localmoran\", \"nCounts\")) #>                           Ii          E.Ii      Var.Ii       Z.Ii #> AAATTACCTATCGATG  0.53682603 -0.0073375879 0.087243111  1.8423152 #> AACATATCAACTGGTG  0.20017125 -0.0008174853 0.009783652  2.0319883 #> AAGATTGGCGGAACGT  0.13533683 -0.0002992400 0.004361215  2.0538630 #> AAGGGACAGATTCTGT  0.67946203 -0.0182482408 0.214584793  1.5061757 #> AATATCGAGGGTTCTC -0.01287299 -0.0009633914 0.011528171 -0.1109218 #> AATGATGATACGCTAT  0.15331553 -0.0306802864 0.356207210  0.3082880 #>                  Pr(z != E(Ii))      mean    median     pysal    -log10p #> AAATTACCTATCGATG     0.06542906 High-High High-High High-High 1.18422931 #> AACATATCAACTGGTG     0.04215484 High-High High-High High-High 1.37515260 #> AAGATTGGCGGAACGT     0.03998896 High-High  Low-High High-High 1.39805992 #> AAGGGACAGATTCTGT     0.13202207 High-High High-High High-High 0.87935347 #> AATATCGAGGGTTCTC     0.91167838  High-Low  High-Low  High-Low 0.04015835 #> AATGATGATACGCTAT     0.75786321 High-High  High-Low High-High 0.12040917 #>                  -log10p_adj #> AAATTACCTATCGATG  0.33913127 #> AACATATCAACTGGTG  0.53005456 #> AAGATTGGCGGAACGT  0.61990867 #> AAGGGACAGATTCTGT  0.03425543 #> AATATCGAGGGTTCTC  0.00000000 #> AATGATGATACGCTAT  0.00000000  # For annotGeometries annotGraph(sfe, \"myofiber_tri2nb\") <-     findSpatialNeighbors(sfe,         type = \"myofiber_simplified\", MARGIN = 3L,         method = \"tri2nb\", dist_type = \"idw\",         zero.policy = TRUE     ) sfe <- annotGeometryUnivariate(sfe,     type = \"localG\", features = \"area\",     annotGraphName = \"myofiber_tri2nb\",     annotGeometryName = \"myofiber_simplified\",     zero.policy = TRUE ) head(localResult(sfe, \"localG\", \"area\",     annotGeometryName = \"myofiber_simplified\" )) #> [1] -2.3083710 -0.8140180  0.0508039 -0.1700897  0.1547597 -0.3688569"},{"path":"https://pachterlab.github.io/Voyager/reference/clusterCorrelograms.html","id":null,"dir":"Reference","previous_headings":"","what":"Find clusters of correlogram patterns — clusterCorrelograms","title":"Find clusters of correlogram patterns — clusterCorrelograms","text":"Cluster correlograms find patterns length scales spatial autocorrelation. correlograms clustered must computed method number lags.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/clusterCorrelograms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find clusters of correlogram patterns — clusterCorrelograms","text":"","code":"clusterCorrelograms(   sfe,   features,   BLUSPARAM,   sample_id = NULL,   method = \"I\",   colGeometryName = NULL,   annotGeometryName = NULL,   show_symbol = TRUE )"},{"path":"https://pachterlab.github.io/Voyager/reference/clusterCorrelograms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find clusters of correlogram patterns — clusterCorrelograms","text":"sfe SpatialFeatureExperiment object correlograms computed features interest. features Features whose correlograms cluster. BLUSPARAM BlusterParam object specifying algorithm use. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. method \"corr\" correlation, \"\" Moran's , \"C\" Geary's C colGeometryName Name colGeometry look features. annotGeometryName Name annotGeometry look features. show_symbol Logical, whether show gene symbol instead Ensembl ID supplied.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/clusterCorrelograms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find clusters of correlogram patterns — clusterCorrelograms","text":"DataFrame 3 columns: feature features, cluster factor cluster membership features within sample, sample_id sample.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/clusterCorrelograms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find clusters of correlogram patterns — clusterCorrelograms","text":"","code":"library(SpatialFeatureExperiment) library(SFEData) library(bluster) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) inds <- c(1, 3, 4, 5) sfe <- runUnivariate(sfe,     type = \"sp.correlogram\",     features = rownames(sfe)[inds],     exprs_values = \"counts\", order = 5 ) clust <- clusterCorrelograms(sfe,     features = rownames(sfe)[inds],     BLUSPARAM = KmeansParam(2) )"},{"path":"https://pachterlab.github.io/Voyager/reference/clusterMoranPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Find clusters on the Moran plot — clusterMoranPlot","title":"Find clusters on the Moran plot — clusterMoranPlot","text":"Moran plot plots value location x axis, average neighbors locations y axis. Sometimes clusters can seen Moran plot, indicating different types neighborhoods.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/clusterMoranPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find clusters on the Moran plot — clusterMoranPlot","text":"","code":"clusterMoranPlot(   sfe,   features,   BLUSPARAM,   sample_id = NULL,   colGeometryName = NULL,   annotGeometryName = NULL,   show_symbol = TRUE )"},{"path":"https://pachterlab.github.io/Voyager/reference/clusterMoranPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find clusters on the Moran plot — clusterMoranPlot","text":"sfe SpatialFeatureExperiment object Moran plot computed feature interest. Moran plot feature computed feature sample_id, calculated stored rowData. See calculateUnivariate. features Features whose Moran plot cluster. Features whose Moran plots computed skipped, warning. BLUSPARAM BlusterParam object specifying algorithm use. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. colGeometryName Name colGeometry look features. annotGeometryName Name annotGeometry look features. show_symbol Logical, whether show gene symbol instead Ensembl ID supplied.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/clusterMoranPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find clusters on the Moran plot — clusterMoranPlot","text":"DataFrame column factor cluster   membership feature. column names features.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/clusterMoranPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find clusters on the Moran plot — clusterMoranPlot","text":"","code":"library(SpatialFeatureExperiment) library(SingleCellExperiment) library(SFEData) library(bluster) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) # Compute moran plot sfe <- runUnivariate(sfe,     type = \"moran.plot\", features = rownames(sfe)[1],     exprs_values = \"counts\" ) clusts <- clusterMoranPlot(sfe, rownames(sfe)[1],     BLUSPARAM = KmeansParam(2) )"},{"path":"https://pachterlab.github.io/Voyager/reference/colFeatureData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata of colData and rowData — colFeatureData","title":"Get metadata of colData and rowData — colFeatureData","text":"Results spatial analyses columns colData rowData stored int_metadata(sfe), internal metadata. function allows users access results.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/colFeatureData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata of colData and rowData — colFeatureData","text":"","code":"colFeatureData(sfe)  rowFeatureData(sfe)"},{"path":"https://pachterlab.github.io/Voyager/reference/colFeatureData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata of colData and rowData — colFeatureData","text":"sfe SFE object.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/colFeatureData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata of colData and rowData — colFeatureData","text":"DataFrame.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/colFeatureData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata of colData and rowData — colFeatureData","text":"","code":"library(SpatialFeatureExperiment) library(SingleCellExperiment) library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) # Moran's I for colData sfe <- colDataMoransI(sfe, \"nCounts\") colFeatureData(sfe) #> DataFrame with 12 rows and 2 columns #>           moran_Vis5A   K_Vis5A #>             <numeric> <numeric> #> barcode            NA        NA #> col                NA        NA #> row                NA        NA #> x                  NA        NA #> y                  NA        NA #> ...               ...       ... #> sample_id          NA        NA #> nCounts      0.675416   1.67027 #> nGenes             NA        NA #> prop_mito          NA        NA #> in_tissue          NA        NA"},{"path":"https://pachterlab.github.io/Voyager/reference/ditto_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Colorblind friendly palette from dittoSeq — ditto_colors","title":"Colorblind friendly palette from dittoSeq — ditto_colors","text":"Just get palette without install dependencies dittoSeq.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/ditto_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colorblind friendly palette from dittoSeq — ditto_colors","text":"","code":"ditto_colors"},{"path":"https://pachterlab.github.io/Voyager/reference/ditto_colors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Colorblind friendly palette from dittoSeq — ditto_colors","text":"character vector hex colors palette. 40 colors.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/ditto_colors.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Colorblind friendly palette from dittoSeq — ditto_colors","text":"dittoSeq package.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/getDivergeRange.html","id":null,"dir":"Reference","previous_headings":"","what":"Get beginning and end of palette to center a divergent palette — getDivergeRange","title":"Get beginning and end of palette to center a divergent palette — getDivergeRange","text":"title self-explanatory.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/getDivergeRange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get beginning and end of palette to center a divergent palette — getDivergeRange","text":"","code":"getDivergeRange(values, diverge_center = 0)"},{"path":"https://pachterlab.github.io/Voyager/reference/getDivergeRange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get beginning and end of palette to center a divergent palette — getDivergeRange","text":"values Numeric vector colored. diverge_center Value center , defaults 0.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/getDivergeRange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get beginning and end of palette to center a divergent palette — getDivergeRange","text":"numeric vector length 2, first element beginning, second end. values 0 1.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/getDivergeRange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get beginning and end of palette to center a divergent palette — getDivergeRange","text":"","code":"v <- rnorm(10) getDivergeRange(v, diverge_center = 0) #> [1] 0.0000000 0.9227951"},{"path":"https://pachterlab.github.io/Voyager/reference/moranPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Use ggplot to plot the moran.plot results — moranPlot","title":"Use ggplot to plot the moran.plot results — moranPlot","text":"function uses ggplot2 plot Moran plot. plot aesthetically pleasing base R version implemented spdep. addition, contours plotted show point density plot, points can colored variable, clusters. contours may also filled influential points plotted. filled, viridis E option used.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/moranPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use ggplot to plot the moran.plot results — moranPlot","text":"","code":"moranPlot(   sfe,   feature,   graphName = 1L,   sample_id = NULL,   contour_color = \"cyan\",   color_by = NULL,   colGeometryName = NULL,   annotGeometryName = NULL,   plot_singletons = TRUE,   filled = FALSE,   divergent = FALSE,   diverge_center = NULL,   show_symbol = TRUE,   ... )"},{"path":"https://pachterlab.github.io/Voyager/reference/moranPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use ggplot to plot the moran.plot results — moranPlot","text":"sfe SpatialFeatureExperiment object. feature Name one variable show plot. converted sentence case x axis lower case y axis appended \"Spatially lagged\". One feature time since colors color_by may specific feature (e.g. clusterMoranPlot). graphName Name colGraph annotGraph, spatial neighborhood graph used compute Moran plot. determine points singletons plot differently plot. sample_id One sample_id sample whose graph plot. contour_color Color point density contours, can changed contours stand points. color_by Variable color points . can name column colData, gene, name column colGeometry specified colGeometryName. can vector length number cells/spots sample_id interest. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. annotGeometryName Name annotGeometry SFE object, annotate gene expression plot. plot_singletons Logical, whether plot items spatial neighbors. filled Logical, whether plot filled contours non-influential points plot influential points points. divergent Logical, whether divergent palette used. diverge_center divergent = TRUE, center palette diverge. NULL, centering. show_symbol Logical, whether show human readable gene symbol plot instead Ensembl IDs row names Ensembl IDs. must column rowData(sfe) called \"symbol\" work. ... arguments pass geom_density2d.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/moranPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use ggplot to plot the moran.plot results — moranPlot","text":"ggplot object.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/moranPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use ggplot to plot the moran.plot results — moranPlot","text":"","code":"library(SpatialFeatureExperiment) library(SingleCellExperiment) library(SFEData) library(bluster) library(scater) sfe <- McKellarMuscleData(\"full\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> downloading 1 resources #> retrieving 1 resource #> loading from cache sfe <- sfe[, colData(sfe)$in_tissue] sfe <- logNormCounts(sfe) colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) sfe <- runUnivariate(sfe, type = \"moran.plot\", features = \"Myh1\") clust <- clusterMoranPlot(sfe, \"Myh1\", BLUSPARAM = KmeansParam(2)) moranPlot(sfe, \"Myh1\", graphName = \"visium\", color_by = clust[, 1])"},{"path":"https://pachterlab.github.io/Voyager/reference/plotColGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial graphs — plotColGraph","title":"Plot spatial graphs — plotColGraph","text":"ggplot version spdep::plot.nb, reducing boilerplate SFE objects.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotColGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial graphs — plotColGraph","text":"","code":"plotColGraph(   sfe,   colGraphName = 1L,   colGeometryName = NULL,   sample_id = NULL,   weights = FALSE,   segment_size = 0.5,   geometry_size = 0.5,   ncol = NULL )  plotAnnotGraph(   sfe,   annotGraphName = 1L,   annotGeometryName = 1L,   sample_id = NULL,   weights = FALSE,   segment_size = 0.5,   geometry_size = 0.5,   ncol = NULL )"},{"path":"https://pachterlab.github.io/Voyager/reference/plotColGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial graphs — plotColGraph","text":"sfe SpatialFeatureExperiment object. colGraphName Name graph associated columns gene count matrix plotted. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. weights Whether plot weights. TRUE, transparency (alpha) segments represent edge weights. segment_size Thickness segments represent graph edges. geometry_size Point size (POINT geometries) line thickness (LINESTRING POLYGON) plot geometry background. ncol Number columns plotting multiple features. Defaults NULL, means using logic facet_wrap, used patchwork's wrap_plots default. annotGraphName Name annotation graph plot. annotGeometryName Name annotGeometry, associated graph specified annotGraphName, spatial coordinates graph nodes context.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotColGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spatial graphs — plotColGraph","text":"ggplot2 object.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotColGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot spatial graphs — plotColGraph","text":"","code":"library(SpatialFeatureExperiment) library(SFEData) library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) plotColGraph(sfe, colGraphName = \"visium\", colGeometryName = \"spotPoly\")  # Make the myofiber segmentations a valid POLYGON geometry ag <- annotGeometry(sfe, \"myofiber_simplified\") ag <- st_buffer(ag, 0) ag <- ag[!st_is_empty(ag), ] annotGeometry(sfe, \"myofiber_simplified\") <- ag annotGraph(sfe, \"myofibers\") <-     findSpatialNeighbors(sfe,         type = \"myofiber_simplified\", MARGIN = 3,         method = \"tri2nb\", dist_type = \"idw\"     ) plotAnnotGraph(sfe,     annotGraphName = \"myofibers\",     annotGeometryName = \"myofiber_simplified\",     weights = TRUE )"},{"path":"https://pachterlab.github.io/Voyager/reference/plotCorrelogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot correlogram — plotCorrelogram","title":"Plot correlogram — plotCorrelogram","text":"Use ggplot2 plot correlograms computed runUnivariate, pulling results rowData. Correlograms multiple genes error bars can plotted, can colored numeric categorical column rowData vector length nrow SFE object. coloring useful correlograms clustered show types length scales patterns decay spatial autocorrelation. method = \"\", error bars twice standard deviation estimated Moran's value.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotCorrelogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot correlogram — plotCorrelogram","text":"","code":"plotCorrelogram(   sfe,   features,   sample_id = NULL,   method = \"I\",   color_by = NULL,   facet_by = c(\"sample_id\", \"features\"),   ncol = NULL,   colGeometryName = NULL,   annotGeometryName = NULL,   plot_signif = TRUE,   p_adj_method = \"BH\",   divergent = FALSE,   diverge_center = NULL,   show_symbol = TRUE )"},{"path":"https://pachterlab.github.io/Voyager/reference/plotCorrelogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot correlogram — plotCorrelogram","text":"sfe SpatialFeatureExperiment object. features Features plot, must rownames gene count matrix, colnames colData colGeometry. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. method \"corr\" correlation, \"\" Moran's , \"C\" Geary's C color_by Name column rowData(sfe) featureData colData (see colFeatureData), colGeometry, annotGeometry color correlogram feature. Alternatively, vector length features. facet_by Whether facet sample_id (default) features. facetting sample_id, different features plotted facet comparison. facetting features, different samples compared feature. Ignored one sample specified. ncol Number columns facetting. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. annotGeometryName Name annotGeometry SFE object, annotate gene expression plot. plot_signif Logical, whether plot significance symbols: p < 0.001: ***, p < 0.01: **, p < 0.05 *, p < 0.1: ., otherwise symbol. p-values two sided, based assumption estimated Moran's normally distributed mean randomized version data. mean variance come moran.test Moran's geary.test Geary's C. Take results grain salt data normally distributed. p_adj_method Multiple testing correction method p.adjust, correct multiple testing (number lags times number features) Moran's estimates plot_signif = TRUE. divergent Logical, whether divergent palette used. diverge_center divergent = TRUE, center palette diverge. NULL, centering. show_symbol Logical, whether show human readable gene symbol plot instead Ensembl IDs row names Ensembl IDs. must column rowData(sfe) called \"symbol\" work.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotCorrelogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot correlogram — plotCorrelogram","text":"ggplot object.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotCorrelogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot correlogram — plotCorrelogram","text":"","code":"library(SpatialFeatureExperiment) library(SFEData) library(bluster) library(scater) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe <- logNormCounts(sfe) colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) inds <- c(1, 3, 4, 5) features <- rownames(sfe)[inds] sfe <- runUnivariate(sfe,     type = \"sp.correlogram\", features = features,     exprs_values = \"counts\", order = 5 ) clust <- clusterCorrelograms(sfe,     features = features,     BLUSPARAM = KmeansParam(2) ) # Color by features plotCorrelogram(sfe, features)  # Color by something else plotCorrelogram(sfe, features, color_by = clust$cluster)  # Facet by features plotCorrelogram(sfe, features, facet_by = \"features\")"},{"path":"https://pachterlab.github.io/Voyager/reference/plotDimLoadings.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot top PC loadings of genes — plotDimLoadings","title":"Plot top PC loadings of genes — plotDimLoadings","text":"Just like Seurat's VizDimLoadings function. found equivalent SCE find useful. trying reproduce Seurat function exactly. instance, like Seurat imposes ggplot theme, like cowplot theme. Maybe rewrite base R now using Tidyverse.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotDimLoadings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot top PC loadings of genes — plotDimLoadings","text":"","code":"plotDimLoadings(   sce,   dims = 1:4,   nfeatures = 10,   show_symbol = TRUE,   symbol_col = \"symbol\",   reduction = \"PCA\",   balanced = TRUE,   ncol = 2 )"},{"path":"https://pachterlab.github.io/Voyager/reference/plotDimLoadings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot top PC loadings of genes — plotDimLoadings","text":"sce SingleCellExperiment object, anything inherits SingleCellExperiment. dims Numeric vector specifying PCs plot. nfeatures Number genes plot. show_symbol Logical; row names matrix Ensembl accessions, indicate whether show human readable gene symbols plot instead. Ignored column specified symbol_col absent rowData. symbol_col row names gene expression matrix Ensembl accessions avoid ambiguity analysis. found rowData, rownames gene count matrix used. reduction Name dimension reduction use. must attribute called \"percentVar\". Defaults \"PCA\". balanced Return equal number genes + - scores. FALSE, returns top genes ranked scores absolute values. ncol Number columns facetted plot.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotDimLoadings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot top PC loadings of genes — plotDimLoadings","text":"ggplot object. Loadings different PCs plotted different   facets one ggplot object returned.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotDimLoadings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot top PC loadings of genes — plotDimLoadings","text":"","code":"library(SFEData) library(scater) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe <- runPCA(sfe, ncomponents = 10, exprs_values = \"counts\") plotDimLoadings(sfe, dims = 1:2)"},{"path":"https://pachterlab.github.io/Voyager/reference/plotLocalResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot local results — plotLocalResult","title":"Plot local results — plotLocalResult","text":"Plot results local spatial analyses space, local Getis-Ord Gi* values.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotLocalResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot local results — plotLocalResult","text":"","code":"plotLocalResult(   sfe,   type,   features,   attribute = NULL,   sample_id = NULL,   colGeometryName = NULL,   annotGeometryName = NULL,   ncol = NULL,   ncol_sample = NULL,   annot_aes = list(),   annot_fixed = list(),   aes_use = c(\"fill\", \"color\", \"shape\", \"linetype\"),   divergent = FALSE,   diverge_center = NULL,   annot_divergent = FALSE,   annot_diverge_center = NULL,   size = 0,   shape = 16,   linetype = 1,   alpha = 1,   color = NA,   fill = \"gray80\",   show_symbol = TRUE,   ... )"},{"path":"https://pachterlab.github.io/Voyager/reference/plotLocalResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot local results — plotLocalResult","text":"sfe SpatialFeatureExperiment object. type local spatial results. Use localResultNames see types results already calculated. features Character vector vectors. see features results given type, see localResultFeatures. attribute field local results type features. result feature vector, argument ignored. result data frame matrix, column name result, \"Ii\" local Moran's . local spatial analysis method, default attribute. See Details. Use localResultAttrs. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. annotGeometryName Name annotGeometry SFE object, annotate gene expression plot. ncol Number columns plotting multiple features. Defaults NULL, means using logic facet_wrap, used patchwork's wrap_plots default. ncol_sample plotting multiple samples facets, many columns facets. distinct ncols, multiple features. plotting multiple features multiple samples, result multi-panel plot panel plot feature facetted samples. annot_aes named list plotting parameters annotation sf data frame. names geom (ggplot2, color fill), values column names annotation sf data frame. Tidyeval supported. annot_fixed Similar annot_aes, fixed aesthetic settings, color = \"gray\". defaults relevant defaults function. aes_use Aesthetic use discrete variables. continuous variables, always \"fill\" polygons point shapes 21-25. discrete variables, can fill, color, shape, linetype, whenever applicable. specified value changed applicable equivalent. example, geometry point \"linetype\" specified, \"shaped\" used instead. divergent Logical, whether divergent palette used. diverge_center divergent = TRUE, center palette diverge. NULL, centering. annot_divergent Just divergent, annotGeometry case different. annot_diverge_center Just diverge_center, annotGeometry case different. size Fixed size points width lines, including outlines polygons. polygons, defaults 0, meaning outlines. points lines, defaults 0.5. Ignored size_by specified. shape Fixed shape points, ignored shape_by specified applicable. linetype Fixed line type, ignored linetype_by specified applicable. alpha Transparency. color Fixed color colGeometry color_by specified applicable, annotGeometry annot_color_by specified applicable. fill Similar color, fill. show_symbol Logical, whether show human readable gene symbol plot instead Ensembl IDs row names Ensembl IDs. must column rowData(sfe) called \"symbol\" work. ... arguments passed wrap_plots.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotLocalResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot local results — plotLocalResult","text":"ggplot2 object plotting one feature. patchwork object plotting multiple features.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotLocalResult.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot local results — plotLocalResult","text":"Many local spatial analyses return data frame matrix results, whose columns can statistic interest location, variance, expected value permutation, p-value, etc. attribute argument specifies column use multiple columns. defaults local method supported package mean: localmoran localmoran_perm Ii, local Moran's statistic location. localC_perm localC, local Geary C statistic location. localG localG_perm localG, local Getis-Ord Gi Gi* statistic. include_self = TRUE calculateUnivariate runUnivariate called, Gi*. Otherwise Gi. LOSH LOSH.mc Hi, local spatial heteroscedasticity moran.plot wx, average value neighbor location. Moran plot best plotted scatter plot wx vs x. See moranPlot. local methods listed return vectors results. instance, localC returns vector default, local Geary's C statistic.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotLocalResult.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot local results — plotLocalResult","text":"function shares internals   plotSpatialFeature, important differences.   plotSpatialFeature, annotGeometry indeed   used annotation protagonist colGeometry, since   easy directly use ggplot2 plot data   annotGeometry sf data frames overlaying   annotGeometry colGeometry involves complicated code.   contrast, function, local results annotGeometry can   plotted separately without anything related colGeometry. Note   annotGeometry local results plotted without   colGeometry, annot_* arguments ignored. Use   arguments aesthetics colGeometry.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotLocalResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot local results — plotLocalResult","text":"","code":"library(SpatialFeatureExperiment) library(SFEData) library(scater) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) feature_use <- rownames(sfe)[1] sfe <- logNormCounts(sfe) sfe <- runUnivariate(sfe, \"localmoran\", feature_use) # Which types of results are available? localResultNames(sfe) #> [1] \"localmoran\" # Which features for localmoran? localResultFeatures(sfe, \"localmoran\") #> [1] \"ENSMUSG00000025902\" # Which columns does the localmoran results have? localResultAttrs(sfe, \"localmoran\", feature_use) #>  [1] \"Ii\"             \"E.Ii\"           \"Var.Ii\"         \"Z.Ii\"           #>  [5] \"Pr(z != E(Ii))\" \"mean\"           \"median\"         \"pysal\"          #>  [9] \"-log10p\"        \"-log10p_adj\"    plotLocalResult(sfe, \"localmoran\", feature_use, \"Ii\",     colGeometryName = \"spotPoly\" )   # For annotGeometry # Make sure it's type POLYGON annotGeometry(sfe, \"myofiber_simplified\") <-     sf::st_buffer(annotGeometry(sfe, \"myofiber_simplified\"), 0) annotGraph(sfe, \"poly2nb_myo\") <-     findSpatialNeighbors(sfe,         type = \"myofiber_simplified\", MARGIN = 3,         method = \"poly2nb\", zero.policy = TRUE     ) sfe <- annotGeometryUnivariate(sfe, \"localmoran\",     features = \"area\",     annotGraphName = \"poly2nb_myo\",     annotGeometryName = \"myofiber_simplified\",     zero.policy = TRUE ) plotLocalResult(sfe, \"localmoran\", \"area\", \"Ii\",     annotGeometryName = \"myofiber_simplified\",     size = 0.3, color = \"cyan\" )  plotLocalResult(sfe, \"localmoran\", \"area\", \"Z.Ii\",     annotGeometryName = \"myofiber_simplified\" )  # don't use annot_* arguments when annotGeometry is plotted without colGeometry"},{"path":"https://pachterlab.github.io/Voyager/reference/plotMoranMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Moran/Geary monte carlo results — plotMoranMC","title":"Plot Moran/Geary monte carlo results — plotMoranMC","text":"Plot simulations density plot histogram compared observed Moran's Geary's C, ggplot2 looks nicer. Unlike plotting function spdep, function can also plot feature different samples facets plot different features samples together comparison.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotMoranMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Moran/Geary monte carlo results — plotMoranMC","text":"","code":"plotMoranMC(   sfe,   features,   sample_id = NULL,   facet_by = c(\"sample_id\", \"features\"),   ncol = NULL,   colGeometryName = NULL,   annotGeometryName = NULL,   ptype = c(\"density\", \"histogram\", \"freqpoly\"),   show_symbol = TRUE,   ... )"},{"path":"https://pachterlab.github.io/Voyager/reference/plotMoranMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Moran/Geary monte carlo results — plotMoranMC","text":"sfe SpatialFeatureExperiment object. features Features plot, must rownames gene count matrix, colnames colData colGeometry. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. facet_by Whether facet sample_id (default) features. facetting sample_id, different features plotted facet comparison. facetting features, different samples compared feature. Ignored one sample specified. ncol Number columns facetting. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. annotGeometryName Name annotGeometry SFE object, annotate gene expression plot. ptype Plot type, one \"density\", \"histogram\", \"freqpoly\". show_symbol Logical, whether show human readable gene symbol plot instead Ensembl IDs row names Ensembl IDs. must column rowData(sfe) called \"symbol\" work. ... arguments passed geom_density, geom_histogram, geom_freqpoly, depending ptype.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotMoranMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Moran/Geary monte carlo results — plotMoranMC","text":"ggplot2 object.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotMoranMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Moran/Geary monte carlo results — plotMoranMC","text":"","code":"library(SpatialFeatureExperiment) library(SFEData) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache colGraph(sfe, \"visium\") <- findVisiumGraph(sfe) sfe <- colDataUnivariate(sfe, type = \"moran.mc\", \"nCounts\", nsim = 100) plotMoranMC(sfe, \"nCounts\")"},{"path":"https://pachterlab.github.io/Voyager/reference/plotSpatialFeature.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gene expression in space — plotSpatialFeature","title":"Plot gene expression in space — plotSpatialFeature","text":"Unlike Seurat ggspavis, plotting functions package uses geom_sf whenever applicable.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotSpatialFeature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gene expression in space — plotSpatialFeature","text":"","code":"plotSpatialFeature(   sfe,   features,   colGeometryName = 1L,   sample_id = NULL,   ncol = NULL,   ncol_sample = NULL,   annotGeometryName = NULL,   annot_aes = list(),   annot_fixed = list(),   exprs_values = \"logcounts\",   aes_use = c(\"fill\", \"color\", \"shape\", \"linetype\"),   divergent = FALSE,   diverge_center = NULL,   annot_divergent = FALSE,   annot_diverge_center = NULL,   size = 0,   shape = 16,   linetype = 1,   alpha = 1,   color = NA,   fill = \"gray80\",   show_symbol = TRUE,   ... )"},{"path":"https://pachterlab.github.io/Voyager/reference/plotSpatialFeature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gene expression in space — plotSpatialFeature","text":"sfe SpatialFeatureExperiment object. features Features plot, must rownames gene count matrix, colnames colData colGeometry. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. ncol Number columns plotting multiple features. Defaults NULL, means using logic facet_wrap, used patchwork's wrap_plots default. ncol_sample plotting multiple samples facets, many columns facets. distinct ncols, multiple features. plotting multiple features multiple samples, result multi-panel plot panel plot feature facetted samples. annotGeometryName Name annotGeometry SFE object, annotate gene expression plot. annot_aes named list plotting parameters annotation sf data frame. names geom (ggplot2, color fill), values column names annotation sf data frame. Tidyeval supported. annot_fixed Similar annot_aes, fixed aesthetic settings, color = \"gray\". defaults relevant defaults function. exprs_values Integer scalar string indicating assay x contains expression values. aes_use Aesthetic use discrete variables. continuous variables, always \"fill\" polygons point shapes 21-25. discrete variables, can fill, color, shape, linetype, whenever applicable. specified value changed applicable equivalent. example, geometry point \"linetype\" specified, \"shaped\" used instead. divergent Logical, whether divergent palette used. diverge_center divergent = TRUE, center palette diverge. NULL, centering. annot_divergent Just divergent, annotGeometry case different. annot_diverge_center Just diverge_center, annotGeometry case different. size Fixed size points width lines, including outlines polygons. polygons, defaults 0, meaning outlines. points lines, defaults 0.5. Ignored size_by specified. shape Fixed shape points, ignored shape_by specified applicable. linetype Fixed line type, ignored linetype_by specified applicable. alpha Transparency. color Fixed color colGeometry color_by specified applicable, annotGeometry annot_color_by specified applicable. fill Similar color, fill. show_symbol Logical, whether show human readable gene symbol plot instead Ensembl IDs row names Ensembl IDs. must column rowData(sfe) called \"symbol\" work. ... arguments passed wrap_plots.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotSpatialFeature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gene expression in space — plotSpatialFeature","text":"ggplot2 object plotting one feature. patchwork object plotting multiple features.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotSpatialFeature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot gene expression in space — plotSpatialFeature","text":"documentation function, \"feature\" can gene (whatever entity corresponds rows gene count matrix), column colData, column colGeometry sf data frame specified colGeometryName argument. continuous variables, Blues palette colorbrewer used divergent = FALSE, roma palette scico package divergent = TRUE. discrete variables, dittoSeq palette used. defaults colorblind friendly. annotation, PuRd colorbrewer palette used continuous variables end dittoSeq palette used discrete variables.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/plotSpatialFeature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot gene expression in space — plotSpatialFeature","text":"","code":"library(SFEData) library(sf) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache # features can be genes or colData or colGeometry columns plotSpatialFeature(sfe, c(\"nCounts\", rownames(sfe)[1]),     exprs_values = \"counts\",     colGeometryName = \"spotPoly\",     annotGeometryName = \"tissueBoundary\" )  # Change fixed aesthetics plotSpatialFeature(sfe, \"nCounts\",     colGeometryName = \"spotPoly\",     annotGeometryName = \"tissueBoundary\",     annot_fixed = list(color = \"blue\", size = 0.3, fill = NA),     alpha = 0.7 )  # Make the myofiber segmentations a valid POLYGON geometry ag <- annotGeometry(sfe, \"myofiber_simplified\") ag <- st_buffer(ag, 0) ag <- ag[!st_is_empty(ag), ] annotGeometry(sfe, \"myofiber_simplified\") <- ag # Also plot an annotGeometry variable plotSpatialFeature(sfe, \"nCounts\",     colGeometryName = \"spotPoly\",     annotGeometryName = \"myofiber_simplified\",     annot_aes = list(fill = \"area\") )"},{"path":"https://pachterlab.github.io/Voyager/reference/spatialReducedDim.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot dimension reduction components in space — spatialReducedDim","title":"Plot dimension reduction components in space — spatialReducedDim","text":"plotting value projection gene expression cell principal component space. present, function work 3D array geographically weighted PCA (GWPCA), future version deal GWPCA results.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/spatialReducedDim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot dimension reduction components in space — spatialReducedDim","text":"","code":"spatialReducedDim(   sfe,   dimred,   ncomponents,   colGeometryName = 1L,   sample_id = NULL,   ncol = NULL,   ncol_sample = NULL,   annotGeometryName = NULL,   annot_aes = list(),   annot_fixed = list(),   exprs_values = \"logcounts\",   aes_use = c(\"fill\", \"color\", \"shape\", \"linetype\"),   divergent = FALSE,   diverge_center = NULL,   annot_divergent = FALSE,   annot_diverge_center = NULL,   size = 0,   shape = 16,   linetype = 1,   alpha = 1,   color = NA,   fill = \"gray80\",   ... )"},{"path":"https://pachterlab.github.io/Voyager/reference/spatialReducedDim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot dimension reduction components in space — spatialReducedDim","text":"sfe SpatialFeatureExperiment object. dimred string integer scalar indicating reduced dimension result reducedDims(sfe) plot. ncomponents numeric scalar indicating number dimensions plot, starting first dimension. Alternatively, numeric vector specifying dimensions plotted. colGeometryName Name colGeometry sf data frame whose numeric columns interest used compute metric. Use colGeometryNames look names sf data frames associated cells/spots. sample_id Sample(s) SFE object whose cells/spots use. Can \"\" compute metric samples; metric computed separately sample. ncol Number columns plotting multiple features. Defaults NULL, means using logic facet_wrap, used patchwork's wrap_plots default. ncol_sample plotting multiple samples facets, many columns facets. distinct ncols, multiple features. plotting multiple features multiple samples, result multi-panel plot panel plot feature facetted samples. annotGeometryName Name annotGeometry SFE object, annotate gene expression plot. annot_aes named list plotting parameters annotation sf data frame. names geom (ggplot2, color fill), values column names annotation sf data frame. Tidyeval supported. annot_fixed Similar annot_aes, fixed aesthetic settings, color = \"gray\". defaults relevant defaults function. exprs_values Integer scalar string indicating assay x contains expression values. aes_use Aesthetic use discrete variables. continuous variables, always \"fill\" polygons point shapes 21-25. discrete variables, can fill, color, shape, linetype, whenever applicable. specified value changed applicable equivalent. example, geometry point \"linetype\" specified, \"shaped\" used instead. divergent Logical, whether divergent palette used. diverge_center divergent = TRUE, center palette diverge. NULL, centering. annot_divergent Just divergent, annotGeometry case different. annot_diverge_center Just diverge_center, annotGeometry case different. size Fixed size points width lines, including outlines polygons. polygons, defaults 0, meaning outlines. points lines, defaults 0.5. Ignored size_by specified. shape Fixed shape points, ignored shape_by specified applicable. linetype Fixed line type, ignored linetype_by specified applicable. alpha Transparency. color Fixed color colGeometry color_by specified applicable, annotGeometry annot_color_by specified applicable. fill Similar color, fill. ... arguments passed wrap_plots.","code":""},{"path":"https://pachterlab.github.io/Voyager/reference/spatialReducedDim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot dimension reduction components in space — spatialReducedDim","text":"plotSpatialFeature. ggplot2 object   plotting one component. patchwork object plotting multiple   components.","code":""},{"path":[]},{"path":"https://pachterlab.github.io/Voyager/reference/spatialReducedDim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot dimension reduction components in space — spatialReducedDim","text":"","code":"library(SFEData) library(scater) sfe <- McKellarMuscleData(\"small\") #> snapshotDate(): 2022-10-17 #> see ?SFEData and browseVignettes('SFEData') for documentation #> loading from cache sfe <- logNormCounts(sfe) sfe <- runPCA(sfe, ncomponents = 2) spatialReducedDim(sfe, \"PCA\", 2, \"spotPoly\",     annotGeometryName = \"tissueBoundary\",     divergent = TRUE, diverge_center = 0 )  # Basically PC1 separates spots not on tissue from those on tissue."},{"path":"https://pachterlab.github.io/Voyager/news/index.html","id":"voyager-0990","dir":"Changelog","previous_headings":"","what":"Voyager 0.99.0","title":"Voyager 0.99.0","text":"Added NEWS.md file track changes package.","code":""}]
